
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 20 19:43:29 CST 2017
//----------------------------------------------------

package proyecto_compi;

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 20 19:43:29 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\011\000\002\051\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\011\004\000\002\052\005\000\002\052" +
    "\003\000\002\032\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\012\000\002\032\011\000" +
    "\002\037\004\000\002\037\002\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\013\003\000\002\013" +
    "\003\000\002\014\006\000\002\005\010\000\002\005\010" +
    "\000\002\005\004\000\002\040\004\000\002\040\006\000" +
    "\002\040\005\000\002\040\007\000\002\041\004\000\002" +
    "\042\013\000\002\042\013\000\002\042\011\000\002\042" +
    "\011\000\002\042\002\000\002\043\005\000\002\043\002" +
    "\000\002\045\006\000\002\045\005\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\002\000\002" +
    "\047\004\000\002\047\002\000\002\020\011\000\002\020" +
    "\011\000\002\021\007\000\002\021\011\000\002\022\012" +
    "\000\002\022\011\000\002\023\013\000\002\023\006\000" +
    "\002\023\012\000\002\023\002\000\002\024\011\000\002" +
    "\024\010\000\002\025\015\000\002\025\010\000\002\026" +
    "\005\000\002\026\007\000\002\026\007\000\002\026\007" +
    "\000\002\026\006\000\002\026\006\000\002\026\006\000" +
    "\002\026\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\033\004\000\002\033" +
    "\002\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\031\004\000\002\031\002\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\035" +
    "\004\000\002\035\002\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\004\000" +
    "\002\015\004\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\016\003\013\004\005\005\016\006\006\007" +
    "\014\021\010\001\002\000\004\002\u0120\001\002\000\012" +
    "\010\uffeb\017\uffeb\022\uffeb\054\uffeb\001\002\000\012\010" +
    "\uffe8\017\uffe8\022\uffe8\054\uffe8\001\002\000\004\002\ufffe" +
    "\001\002\000\004\010\u011b\001\002\000\016\003\013\004" +
    "\005\005\016\006\006\007\014\021\010\001\002\000\016" +
    "\003\013\004\005\005\016\006\006\007\014\021\010\001" +
    "\002\000\004\053\u0118\001\002\000\012\010\uffe9\017\uffe9" +
    "\022\uffe9\054\uffe9\001\002\000\006\010\017\017\024\001" +
    "\002\000\012\010\uffea\017\uffea\022\uffea\054\uffea\001\002" +
    "\000\026\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\021" +
    "\uffd9\022\357\030\u0108\032\356\054\uffd9\001\002\000\040" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\013\uffe7\014\uffe7\020\uffe7\021\uffe7\026\uffe7\027\uffe7" +
    "\035\uffe7\036\uffe7\001\002\000\050\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\020\uffd8\021\uffd8\026\uffd8\027\uffd8\032\uffd8\035\uffd8\036" +
    "\uffd8\043\uffd8\053\uffd8\054\uffd8\001\002\000\042\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\014\uffe4\020\uffe4\021\uffe4\026\uffe4\027\uffe4\035\uffe4" +
    "\036\uffe4\054\uffe4\001\002\000\042\003\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5" +
    "\020\uffe5\021\uffe5\026\uffe5\027\uffe5\035\uffe5\036\uffe5\054" +
    "\u0106\001\002\000\004\030\025\001\002\000\004\031\026" +
    "\001\002\000\004\024\027\001\002\000\036\003\052\004" +
    "\005\005\016\006\006\007\014\010\046\011\043\013\034" +
    "\014\056\020\040\026\051\027\036\035\045\036\035\001" +
    "\002\000\004\010\355\001\002\000\036\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\020\ufff5\026\ufff5\027\ufff5\035\ufff5\036\ufff5\001\002" +
    "\000\036\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\013\ufff8\014\ufff8\020\ufff8\026\ufff8\027\ufff8" +
    "\035\ufff8\036\ufff8\001\002\000\036\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6" +
    "\020\ufff6\026\ufff6\027\ufff6\035\ufff6\036\ufff6\001\002\000" +
    "\006\003\342\030\343\001\002\000\004\030\331\001\002" +
    "\000\004\053\330\001\002\000\036\003\052\004\005\005" +
    "\016\006\006\007\014\010\046\011\043\013\034\014\056" +
    "\020\040\026\051\027\036\035\045\036\035\001\002\000" +
    "\006\026\322\027\321\001\002\000\036\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014" +
    "\ufff7\020\ufff7\026\ufff7\027\ufff7\035\ufff7\036\ufff7\001\002" +
    "\000\004\053\320\001\002\000\006\003\261\030\262\001" +
    "\002\000\004\025\260\001\002\000\004\030\250\001\002" +
    "\000\014\003\233\022\107\030\234\032\uffd9\043\uffd9\001" +
    "\002\000\036\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\013\ufffa\014\ufffa\020\ufffa\026\ufffa\027" +
    "\ufffa\035\ufffa\036\ufffa\001\002\000\036\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\020\ufff9\026\ufff9\027\ufff9\035\ufff9\036\ufff9\001\002" +
    "\000\004\053\232\001\002\000\040\003\052\004\005\005" +
    "\016\006\006\007\014\010\046\011\043\013\034\014\056" +
    "\020\040\026\051\027\036\035\045\036\035\053\223\001" +
    "\002\000\006\032\212\043\214\001\002\000\036\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\020\ufffb\026\ufffb\027\ufffb\035\ufffb\036\ufffb" +
    "\001\002\000\004\053\211\001\002\000\006\003\060\030" +
    "\061\001\002\000\036\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\020\ufff4\026" +
    "\ufff4\027\ufff4\035\ufff4\036\ufff4\001\002\000\004\031\205" +
    "\001\002\000\014\004\005\005\016\006\006\007\014\010" +
    "\064\001\002\000\004\053\132\001\002\000\006\032\120" +
    "\043\121\001\002\000\010\022\107\032\uffd9\043\uffd9\001" +
    "\002\000\004\010\066\001\002\000\012\022\107\032\106" +
    "\053\uffd9\054\uffd9\001\002\000\006\053\uffa4\054\070\001" +
    "\002\000\004\010\064\001\002\000\004\053\uffb1\001\002" +
    "\000\004\053\uffa5\001\002\000\006\032\074\043\075\001" +
    "\002\000\006\026\101\027\100\001\002\000\002\001\002" +
    "\000\006\053\uffa4\054\070\001\002\000\004\053\uffa8\001" +
    "\002\000\006\053\uffa4\054\070\001\002\000\006\053\uffa4" +
    "\054\070\001\002\000\006\053\uffa4\054\070\001\002\000" +
    "\004\053\uffa9\001\002\000\004\053\uffa7\001\002\000\004" +
    "\053\uffa6\001\002\000\006\026\113\027\112\001\002\000" +
    "\002\001\002\000\004\023\111\001\002\000\014\031\uffd7" +
    "\032\uffd7\043\uffd7\053\uffd7\054\uffd7\001\002\000\006\053" +
    "\uffa4\054\070\001\002\000\006\053\uffa4\054\070\001\002" +
    "\000\006\053\uffa4\054\070\001\002\000\004\053\uffb0\001" +
    "\002\000\004\053\uffaf\001\002\000\004\053\uffae\001\002" +
    "\000\006\026\125\027\124\001\002\000\002\001\002\000" +
    "\006\053\uffa4\054\070\001\002\000\004\053\uffac\001\002" +
    "\000\006\053\uffa4\054\070\001\002\000\006\053\uffa4\054" +
    "\070\001\002\000\006\053\uffa4\054\070\001\002\000\004" +
    "\053\uffad\001\002\000\004\053\uffab\001\002\000\004\053" +
    "\uffaa\001\002\000\010\026\134\027\133\030\137\001\002" +
    "\000\004\047\202\001\002\000\004\047\177\001\002\000" +
    "\004\053\154\001\002\000\004\047\145\001\002\000\010" +
    "\026\134\027\133\030\137\001\002\000\004\031\141\001" +
    "\002\000\010\031\uff96\052\143\053\uff96\001\002\000\006" +
    "\031\uff98\053\uff98\001\002\000\010\026\134\027\133\030" +
    "\137\001\002\000\006\031\uff97\053\uff97\001\002\000\006" +
    "\026\147\027\146\001\002\000\010\031\uff96\052\143\053" +
    "\uff96\001\002\000\010\031\uff96\052\143\053\uff96\001\002" +
    "\000\010\031\uff96\052\143\053\uff96\001\002\000\006\031" +
    "\uff9d\053\uff9d\001\002\000\006\031\uff9c\053\uff9c\001\002" +
    "\000\006\031\uff9b\053\uff9b\001\002\000\004\010\064\001" +
    "\002\000\004\031\173\001\002\000\006\032\157\043\160" +
    "\001\002\000\006\026\166\027\165\001\002\000\002\001" +
    "\002\000\006\031\uff9e\054\162\001\002\000\004\010\064" +
    "\001\002\000\004\031\uffa2\001\002\000\004\031\uff9f\001" +
    "\002\000\006\031\uff9e\054\162\001\002\000\006\031\uff9e" +
    "\054\162\001\002\000\006\031\uff9e\054\162\001\002\000" +
    "\004\031\uffa3\001\002\000\004\031\uffa1\001\002\000\004" +
    "\031\uffa0\001\002\000\004\024\174\001\002\000\036\003" +
    "\052\004\005\005\016\006\006\007\014\010\046\011\043" +
    "\013\034\014\056\020\040\026\051\027\036\035\045\036" +
    "\035\001\002\000\004\025\176\001\002\000\036\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013" +
    "\uffb3\014\uffb3\020\uffb3\026\uffb3\027\uffb3\035\uffb3\036\uffb3" +
    "\001\002\000\002\001\002\000\010\031\uff96\052\143\053" +
    "\uff96\001\002\000\006\031\uff9a\053\uff9a\001\002\000\002" +
    "\001\002\000\010\031\uff96\052\143\053\uff96\001\002\000" +
    "\006\031\uff99\053\uff99\001\002\000\004\024\206\001\002" +
    "\000\036\003\052\004\005\005\016\006\006\007\014\010" +
    "\046\011\043\013\034\014\056\020\040\026\051\027\036" +
    "\035\045\036\035\001\002\000\004\025\210\001\002\000" +
    "\036\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\013\uffb2\014\uffb2\020\uffb2\026\uffb2\027\uffb2\035" +
    "\uffb2\036\uffb2\001\002\000\036\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\020" +
    "\ufff2\026\ufff2\027\ufff2\035\ufff2\036\ufff2\001\002\000\006" +
    "\026\226\027\225\001\002\000\006\053\217\054\216\001" +
    "\002\000\002\001\002\000\006\053\217\054\216\001\002" +
    "\000\006\003\221\010\064\001\002\000\036\003\uff8f\004" +
    "\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\013\uff8f" +
    "\014\uff8f\020\uff8f\026\uff8f\027\uff8f\035\uff8f\036\uff8f\001" +
    "\002\000\036\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\013\uff94\014\uff94\020\uff94\026\uff94\027" +
    "\uff94\035\uff94\036\uff94\001\002\000\004\053\223\001\002" +
    "\000\036\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\013\uff90\014\uff90\020\uff90\026\uff90\027\uff90" +
    "\035\uff90\036\uff90\001\002\000\036\003\uff91\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\013\uff91\014\uff91" +
    "\020\uff91\026\uff91\027\uff91\035\uff91\036\uff91\001\002\000" +
    "\036\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\013\uff95\014\uff95\020\uff95\026\uff95\027\uff95\035" +
    "\uff95\036\uff95\001\002\000\006\053\217\054\216\001\002" +
    "\000\006\053\217\054\216\001\002\000\036\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\013\uff93" +
    "\014\uff93\020\uff93\026\uff93\027\uff93\035\uff93\036\uff93\001" +
    "\002\000\036\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\013\uff92\014\uff92\020\uff92\026\uff92\027" +
    "\uff92\035\uff92\036\uff92\001\002\000\036\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014" +
    "\uffec\020\uffec\026\uffec\027\uffec\035\uffec\036\uffec\001\002" +
    "\000\036\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\013\ufff1\014\ufff1\020\ufff1\026\ufff1\027\ufff1" +
    "\035\ufff1\036\ufff1\001\002\000\004\031\247\001\002\000" +
    "\010\026\236\027\235\031\uffc2\001\002\000\006\031\uffc0" +
    "\054\241\001\002\000\006\031\uffc0\054\241\001\002\000" +
    "\004\031\244\001\002\000\006\031\uffc0\054\241\001\002" +
    "\000\010\026\236\027\235\031\uffc2\001\002\000\004\031" +
    "\uffc5\001\002\000\004\031\uffc1\001\002\000\004\053\uffc7" +
    "\001\002\000\004\031\uffc4\001\002\000\004\031\uffc3\001" +
    "\002\000\004\053\uffc6\001\002\000\004\027\251\001\002" +
    "\000\006\031\253\054\252\001\002\000\002\001\002\000" +
    "\004\053\254\001\002\000\036\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\020" +
    "\uffbd\026\uffbd\027\uffbd\035\uffbd\036\uffbd\001\002\000\004" +
    "\031\256\001\002\000\004\053\257\001\002\000\036\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\013\uffbc\014\uffbc\020\uffbc\026\uffbc\027\uffbc\035\uffbc\036" +
    "\uffbc\001\002\000\004\002\ufffd\001\002\000\004\031\313" +
    "\001\002\000\010\026\134\027\133\030\137\001\002\000" +
    "\004\031\264\001\002\000\004\024\265\001\002\000\036" +
    "\003\052\004\005\005\016\006\006\007\014\010\046\011" +
    "\043\013\034\014\056\020\040\026\051\027\036\035\045" +
    "\036\035\001\002\000\004\025\267\001\002\000\040\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\270\013\uffb6\014\uffb6\020\uffb6\026\uffb6\027\uffb6\035" +
    "\uffb6\036\uffb6\001\002\000\006\011\272\024\273\001\002" +
    "\000\036\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\013\uffbb\014\uffbb\020\uffbb\026\uffbb\027\uffbb" +
    "\035\uffbb\036\uffbb\001\002\000\006\003\276\030\277\001" +
    "\002\000\036\003\052\004\005\005\016\006\006\007\014" +
    "\010\046\011\043\013\034\014\056\020\040\026\051\027" +
    "\036\035\045\036\035\001\002\000\004\025\275\001\002" +
    "\000\036\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\013\uffb8\014\uffb8\020\uffb8\026\uffb8\027\uffb8" +
    "\035\uffb8\036\uffb8\001\002\000\004\031\306\001\002\000" +
    "\010\026\134\027\133\030\137\001\002\000\004\031\301" +
    "\001\002\000\004\024\302\001\002\000\036\003\052\004" +
    "\005\005\016\006\006\007\014\010\046\011\043\013\034" +
    "\014\056\020\040\026\051\027\036\035\045\036\035\001" +
    "\002\000\004\025\304\001\002\000\040\003\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\270\013" +
    "\uffb6\014\uffb6\020\uffb6\026\uffb6\027\uffb6\035\uffb6\036\uffb6" +
    "\001\002\000\036\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\013\uffb9\014\uffb9\020\uffb9\026\uffb9" +
    "\027\uffb9\035\uffb9\036\uffb9\001\002\000\004\024\307\001" +
    "\002\000\036\003\052\004\005\005\016\006\006\007\014" +
    "\010\046\011\043\013\034\014\056\020\040\026\051\027" +
    "\036\035\045\036\035\001\002\000\004\025\311\001\002" +
    "\000\040\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\270\013\uffb6\014\uffb6\020\uffb6\026\uffb6" +
    "\027\uffb6\035\uffb6\036\uffb6\001\002\000\036\003\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7" +
    "\014\uffb7\020\uffb7\026\uffb7\027\uffb7\035\uffb7\036\uffb7\001" +
    "\002\000\004\024\314\001\002\000\036\003\052\004\005" +
    "\005\016\006\006\007\014\010\046\011\043\013\034\014" +
    "\056\020\040\026\051\027\036\035\045\036\035\001\002" +
    "\000\004\025\316\001\002\000\040\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\270\013\uffb6" +
    "\014\uffb6\020\uffb6\026\uffb6\027\uffb6\035\uffb6\036\uffb6\001" +
    "\002\000\036\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\013\uffba\014\uffba\020\uffba\026\uffba\027" +
    "\uffba\035\uffba\036\uffba\001\002\000\036\003\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014" +
    "\ufff3\020\ufff3\026\ufff3\027\ufff3\035\ufff3\036\ufff3\001\002" +
    "\000\004\053\326\001\002\000\004\053\325\001\002\000" +
    "\004\053\324\001\002\000\036\003\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef\020" +
    "\uffef\026\uffef\027\uffef\035\uffef\036\uffef\001\002\000\036" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\013\uffee\014\uffee\020\uffee\026\uffee\027\uffee\035\uffee" +
    "\036\uffee\001\002\000\036\003\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\020\uffed" +
    "\026\uffed\027\uffed\035\uffed\036\uffed\001\002\000\004\025" +
    "\ufffc\001\002\000\036\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\020\ufff0\026" +
    "\ufff0\027\ufff0\035\ufff0\036\ufff0\001\002\000\004\056\332" +
    "\001\002\000\004\054\333\001\002\000\004\010\334\001" +
    "\002\000\006\022\107\031\340\001\002\000\004\031\336" +
    "\001\002\000\004\053\337\001\002\000\036\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\020\uffbe\026\uffbe\027\uffbe\035\uffbe\036\uffbe\001" +
    "\002\000\004\053\341\001\002\000\036\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\020\uffbf\026\uffbf\027\uffbf\035\uffbf\036\uffbf\001\002" +
    "\000\004\031\351\001\002\000\010\026\134\027\133\030" +
    "\137\001\002\000\004\031\345\001\002\000\004\024\346" +
    "\001\002\000\036\003\052\004\005\005\016\006\006\007" +
    "\014\010\046\011\043\013\034\014\056\020\040\026\051" +
    "\027\036\035\045\036\035\001\002\000\004\025\350\001" +
    "\002\000\036\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\013\uffb5\014\uffb5\020\uffb5\026\uffb5\027" +
    "\uffb5\035\uffb5\036\uffb5\001\002\000\004\024\352\001\002" +
    "\000\036\003\052\004\005\005\016\006\006\007\014\010" +
    "\046\011\043\013\034\014\056\020\040\026\051\027\036" +
    "\035\045\036\035\001\002\000\004\025\354\001\002\000" +
    "\036\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\013\uffb4\014\uffb4\020\uffb4\026\uffb4\027\uffb4\035" +
    "\uffb4\036\uffb4\001\002\000\046\003\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\020" +
    "\uffd9\021\uffd9\022\357\026\uffd9\027\uffd9\032\356\035\uffd9" +
    "\036\uffd9\054\uffd9\001\002\000\006\026\u0104\027\u0103\001" +
    "\002\000\004\023\360\001\002\000\004\032\377\001\002" +
    "\000\004\023\362\001\002\000\044\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\020\uffd7\021\uffd7\026\uffd7\027\uffd7\032\363\035\uffd7\036" +
    "\uffd7\054\uffd7\001\002\000\004\024\364\001\002\000\006" +
    "\026\367\027\365\001\002\000\006\025\uffdd\054\371\001" +
    "\002\000\004\025\375\001\002\000\006\025\uffdd\054\371" +
    "\001\002\000\006\025\uffdd\054\371\001\002\000\006\026" +
    "\367\027\365\001\002\000\004\025\uffdc\001\002\000\004" +
    "\025\uffde\001\002\000\004\025\uffdb\001\002\000\042\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\020\uffe0\021\uffe0\026\uffe0\027\uffe0\035" +
    "\uffe0\036\uffe0\054\uffe0\001\002\000\004\025\uffda\001\002" +
    "\000\004\024\u0100\001\002\000\006\026\367\027\365\001" +
    "\002\000\004\025\u0102\001\002\000\042\003\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014" +
    "\uffdf\020\uffdf\021\uffdf\026\uffdf\027\uffdf\035\uffdf\036\uffdf" +
    "\054\uffdf\001\002\000\042\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\020\uffe1" +
    "\021\uffe1\026\uffe1\027\uffe1\035\uffe1\036\uffe1\054\uffe1\001" +
    "\002\000\042\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\020\uffe2\021\uffe2\026" +
    "\uffe2\027\uffe2\035\uffe2\036\uffe2\054\uffe2\001\002\000\042" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\020\uffe3\021\uffe3\026\uffe3\027\uffe3" +
    "\035\uffe3\036\uffe3\054\uffe3\001\002\000\004\010\355\001" +
    "\002\000\040\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\026" +
    "\uffe6\027\uffe6\035\uffe6\036\uffe6\001\002\000\012\004\005" +
    "\005\016\006\006\007\014\001\002\000\010\010\u010f\022" +
    "\u0110\054\u010d\001\002\000\004\031\u010b\001\002\000\004" +
    "\053\u010c\001\002\000\016\003\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\021\uffd6\001\002\000\012\004\005\005\016" +
    "\006\006\007\014\001\002\000\004\031\uffd3\001\002\000" +
    "\006\022\u0114\054\u010d\001\002\000\004\023\u0111\001\002" +
    "\000\004\054\u010d\001\002\000\004\031\uffd2\001\002\000" +
    "\004\031\uffd1\001\002\000\004\023\u0115\001\002\000\004" +
    "\054\u010d\001\002\000\004\031\uffd0\001\002\000\004\031" +
    "\uffcf\001\002\000\016\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\021\uffd4\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\030\u011c\001\002\000\012" +
    "\004\005\005\016\006\006\007\014\001\002\000\004\031" +
    "\u011e\001\002\000\004\053\u011f\001\002\000\016\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\021\uffd5\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\014\002\003\003\006\005\010\011\011\012" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\u0119\003\006\005\010\011\011\012\014\001\001\000\014" +
    "\002\u0118\003\006\005\010\011\011\012\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\021\014\020" +
    "\032\022\052\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\036\006\054\011\053\012\027" +
    "\013\052\014\020\016\046\017\047\020\040\021\031\022" +
    "\030\024\032\025\056\045\041\051\043\001\001\000\012" +
    "\013\021\014\020\032\022\052\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\036\006" +
    "\054\011\053\012\027\013\052\014\020\016\046\017\047" +
    "\020\040\021\031\022\030\024\032\025\056\045\041\051" +
    "\326\001\001\000\004\006\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\230\006\054\011" +
    "\053\012\027\013\052\014\020\016\046\017\047\020\040" +
    "\021\031\022\030\024\032\025\056\045\041\001\001\000" +
    "\004\006\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\064\013\062\014\020\026\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\066\014\020\001\001\000\002\001\001\000\004\033\070" +
    "\001\001\000\010\013\072\014\020\027\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\101\001\001\000\004\006\075\001\001\000\004\033" +
    "\076\001\001\000\002\001\001\000\004\033\104\001\001" +
    "\000\004\033\103\001\001\000\004\033\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\113\001\001\000\004\006\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\116\001\001\000\004" +
    "\033\115\001\001\000\004\033\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\125" +
    "\001\001\000\004\006\121\001\001\000\004\033\122\001" +
    "\001\000\002\001\001\000\004\033\130\001\001\000\004" +
    "\033\127\001\001\000\004\033\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\135" +
    "\034\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\135\034\137" +
    "\001\001\000\002\001\001\000\004\035\141\001\001\000" +
    "\002\001\001\000\006\006\135\034\143\001\001\000\002" +
    "\001\001\000\004\006\147\001\001\000\004\035\152\001" +
    "\001\000\004\035\151\001\001\000\004\035\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\155\014\020\030\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\166\001\001\000\004\006" +
    "\160\001\001\000\004\031\162\001\001\000\010\013\155" +
    "\014\020\030\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\171\001\001\000\004\031\170\001\001" +
    "\000\004\031\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\036" +
    "\006\054\011\053\012\027\013\052\014\020\016\046\017" +
    "\047\020\040\021\031\022\030\024\032\025\056\045\041" +
    "\051\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\177\001\001\000\004\035\200\001\001\000\002" +
    "\001\001\000\004\006\202\001\001\000\004\035\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\036" +
    "\006\054\011\053\012\027\013\052\014\020\016\046\017" +
    "\047\020\040\021\031\022\030\024\032\025\056\045\041" +
    "\051\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\223\001\001" +
    "\000\004\006\214\001\001\000\004\015\217\001\001\000" +
    "\010\013\052\014\020\016\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\227\001\001" +
    "\000\004\015\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\237\046\236\001\001\000\004\047\245\001" +
    "\001\000\004\047\244\001\001\000\002\001\001\000\004" +
    "\047\241\001\001\000\006\006\237\046\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\135\034\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\036\006\054\011\053\012\027" +
    "\013\052\014\020\016\046\017\047\020\040\021\031\022" +
    "\030\024\032\025\056\045\041\051\265\001\001\000\002" +
    "\001\001\000\004\023\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\036\006\054" +
    "\011\053\012\027\013\052\014\020\016\046\017\047\020" +
    "\040\021\031\022\030\024\032\025\056\045\041\051\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\135\034\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\036\006\054\011\053\012" +
    "\027\013\052\014\020\016\046\017\047\020\040\021\031" +
    "\022\030\024\032\025\056\045\041\051\302\001\001\000" +
    "\002\001\001\000\004\023\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\036\006\054\011\053\012" +
    "\027\013\052\014\020\016\046\017\047\020\040\021\031" +
    "\022\030\024\032\025\056\045\041\051\307\001\001\000" +
    "\002\001\001\000\004\023\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\036\006\054\011\053\012" +
    "\027\013\052\014\020\016\046\017\047\020\040\021\031" +
    "\022\030\024\032\025\056\045\041\051\314\001\001\000" +
    "\002\001\001\000\004\023\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\135\034\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\036\006\054\011\053\012\027" +
    "\013\052\014\020\016\046\017\047\020\040\021\031\022" +
    "\030\024\032\025\056\045\041\051\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\036\006\054\011\053\012\027\013\052\014\020\016\046" +
    "\017\047\020\040\021\031\022\030\024\032\025\056\045" +
    "\041\051\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0104\001\001\000\004\006" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\367\036\365\001" +
    "\001\000\004\037\375\001\001\000\002\001\001\000\004" +
    "\037\373\001\001\000\004\037\371\001\001\000\006\006" +
    "\367\036\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\367\036\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\021\014\020\032\022" +
    "\052\u0106\001\001\000\002\001\001\000\006\012\u0108\040" +
    "\u0109\001\001\000\004\041\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0108\040" +
    "\u0116\001\001\000\002\001\001\000\004\041\u0112\001\001" +
    "\000\002\001\001\000\004\041\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0108\040\u011c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //report_fatal_error("Fatal Error: " + s.value, null);
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion_variable_coma ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion_variable_coma ::= COMA asignacion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_coma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion_variable ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion_variable ::= variable IGUAL CONSTSTR asignacion_variable_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion_variable ::= variable IGUAL CONSTCHAR asignacion_variable_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion_variable ::= variable OperARITMETICOIGUAL operacion_aritmetica asignacion_variable_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion_variable ::= variable operacion_aritmetica asignacion_variable_coma 
            {
              Object RESULT =null;
		int IGUALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int IGUALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object IGUAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion_operador_logico ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_operador_logico",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicion_operador_logico ::= OPERADORLOGICO condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_operador_logico",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion ::= PARENTESISIZQUIERDO condicion PARENTESISDERECHO condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= CONSTSTR OPERADORRELACIONAL operacion_aritmetica condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= CONSTCHAR OPERADORRELACIONAL operacion_aritmetica condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= operacion_aritmetica OPERADORRELACIONAL CONSTSTR condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condicion ::= operacion_aritmetica OPERADORRELACIONAL CONSTCHAR condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicion ::= operacion_aritmetica OPERADORRELACIONAL operacion_aritmetica condicion_operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_actualizacion_coma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_actualizacion_coma ::= COMA for_actualizacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion_coma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_actualizacion ::= variable IGUAL CONSTSTR for_actualizacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_actualizacion ::= variable IGUAL CONSTCHAR for_actualizacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_actualizacion ::= variable OperARITMETICOIGUAL operacion_aritmetica for_actualizacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_actualizacion ::= variable IGUAL operacion_aritmetica for_actualizacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_actualizacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_inicializacion_coma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_inicializacion_coma ::= COMA for_inicializacion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion_coma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_inicializacion2 ::= variable IGUAL CONSTSTR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_inicializacion2 ::= variable IGUAL CONSTCHAR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_inicializacion2 ::= variable OperARITMETICOIGUAL operacion_aritmetica for_inicializacion_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_inicializacion2 ::= variable IGUAL operacion_aritmetica for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_inicializacion ::= variable IGUAL CONSTSTR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_inicializacion ::= variable IGUAL CONSTCHAR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_inicializacion ::= variable OperARITMETICOIGUAL operacion_aritmetica for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_inicializacion ::= variable IGUAL operacion_aritmetica for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_inicializacion ::= tipo ID IGUAL CONSTSTR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_inicializacion ::= tipo ID IGUAL CONSTCHAR for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_inicializacion ::= tipo ID IGUAL operacion_aritmetica for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_inicializacion ::= tipo variable for_inicializacion_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inicializacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _for ::= FOR error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _for ::= FOR PARENTESISIZQUIERDO for_inicializacion PUNTOYCOMA condicion PUNTOYCOMA for_actualizacion PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _while ::= WHILE error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _while ::= WHILE PARENTESISIZQUIERDO condicion PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_while",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // else ::= ELSE IF error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else ::= ELSE LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else ::= ELSE IF PARENTESISIZQUIERDO condicion PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _if ::= IF error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _if ::= IF PARENTESISIZQUIERDO condicion PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print ::= PRINTF PARENTESISIZQUIERDO CONSTSTR COMA operacion_aritmetica PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print ::= PRINTF PARENTESISIZQUIERDO CONSTSTR PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // scans ::= SCANF PARENTESISIZQUIERDO PARAMETROSCANF COMA elemento_array PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // scans ::= SCANF PARENTESISIZQUIERDO PARAMETROSCANF COMA ID PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamado_funcion_parametros_coma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llamado_funcion_parametros_coma ::= COMA llamado_funcion_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros_coma",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamado_funcion_parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamado_funcion_parametros ::= CONSTSTR llamado_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamado_funcion_parametros ::= CONSTCHAR llamado_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamado_funcion_parametros ::= operacion_aritmetica llamado_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamado_funcion ::= ID error PARENTESISDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamado_funcion ::= ID PARENTESISIZQUIERDO llamado_funcion_parametros PARENTESISDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamado_funcion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funciones_parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_parametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funciones_parametros ::= tipo ID funciones_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_parametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funciones ::= VOID error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funciones ::= tipo error PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones ::= VOID ID PARENTESISIZQUIERDO funciones_parametros PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funciones ::= tipo ID PARENTESISIZQUIERDO funciones_parametros PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_funcion_parametros_coma ::= COMA declaracion_funcion_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros_coma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_funcion_parametros ::= tipo ID CORCHETEIZQUIERDO CORCHETEDERECHO declaracion_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_funcion_parametros ::= tipo ID declaracion_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_funcion_parametros ::= tipo CORCHETEIZQUIERDO CORCHETEDERECHO declaracion_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_funcion_parametros ::= tipo declaracion_funcion_parametros_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion_parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_funcion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_funcion ::= VOID ID PARENTESISIZQUIERDO declaracion_funcion_parametros PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_funcion ::= tipo ID PARENTESISIZQUIERDO declaracion_funcion_parametros PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elemento_array ::= ID CORCHETEIZQUIERDO operacion_aritmetica CORCHETEDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento_array",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= elemento_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicializacion_arreglo ::= CONSTSTR inicializacion_arreglo_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicializacion_arreglo ::= CONSTCHAR inicializacion_arreglo_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicializacion_arreglo ::= operacion_aritmetica inicializacion_arreglo_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicializacion_arreglo_coma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicializacion_arreglo_coma ::= COMA inicializacion_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_arreglo_coma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_variables ::= ID CORCHETEIZQUIERDO CORCHETEDERECHO IGUAL LLAVEIZQUIERDA inicializacion_arreglo LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_variables ::= ID CORCHETEIZQUIERDO operacion_aritmetica CORCHETEDERECHO IGUAL LLAVEIZQUIERDA inicializacion_arreglo LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_variables ::= ID IGUAL CONSTSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_variables ::= ID IGUAL CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_variables ::= ID IGUAL operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_variables ::= lista_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_variables ::= lista_variables COMA declaracion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_variable ::= tipo declaracion_variables 
            {
              Object RESULT =null;
		int PUNTOYCOMAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int PUNTOYCOMAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object PUNTOYCOMA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= INTPUNT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= CHARPUNT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigo ::= error codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo ::= RETURN CONSTSTR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo ::= RETURN CONSTCHAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= RETURN operacion_aritmetica PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= CONSTSTR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= CONSTCHAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= operacion_aritmetica PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= llamado_funcion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= _for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= _if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= _while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= scans 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= incrementarDecrementarVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigos ::= codigo codigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= tipo MAIN PARENTESISIZQUIERDO PARENTESISDERECHO LLAVEIZQUIERDA codigos LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= declaracion_variable programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= declaracion_funcion programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


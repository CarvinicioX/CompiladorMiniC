
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 21 10:24:34 CST 2017
//----------------------------------------------------

package proyecto_compi;

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 21 10:24:34 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\043\016\000\002\002\004\000\002\065" +
    "\005\000\002\071\002\000\002\065\006\000\002\072\002" +
    "\000\002\065\006\000\002\067\005\000\002\067\003\000" +
    "\002\064\003\000\002\064\006\000\002\066\005\000\002" +
    "\066\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\040\004" +
    "\000\002\040\004\000\002\040\005\000\002\030\007\000" +
    "\002\073\002\000\002\030\007\000\002\060\004\000\002" +
    "\060\002\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\005\000\002\056\011\000\002\051\011\000\002" +
    "\051\007\000\002\054\011\000\002\054\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\007\004" +
    "\000\002\007\004\000\002\052\005\000\002\052\005\000" +
    "\002\074\002\000\002\052\006\000\002\075\002\000\002" +
    "\052\006\000\002\076\002\000\002\052\006\000\002\077" +
    "\002\000\002\052\006\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\041\004\000\002\041\002\000\002" +
    "\042\003\000\002\042\003\000\002\027\013\000\002\027" +
    "\002\000\002\006\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\050\003\000" +
    "\002\050\002\000\002\045\004\000\002\100\002\000\002" +
    "\045\007\000\002\046\005\000\002\046\002\000\002\047" +
    "\004\000\002\044\003\000\002\044\005\000\002\070\007" +
    "\000\002\101\002\000\002\070\007\000\002\057\005\000" +
    "\002\024\011\000\002\016\007\000\002\013\003\000\002" +
    "\013\002\000\002\014\003\000\002\014\002\000\002\015" +
    "\003\000\002\015\002\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\036\005\000\002\036\003\000" +
    "\002\037\006\000\002\037\004\000\002\037\002\000\002" +
    "\010\006\000\002\011\007\000\002\011\002\000\002\025" +
    "\006\000\002\026\004\000\002\020\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\002\000\002\061\004\000" +
    "\002\062\005\000\002\062\005\000\002\062\002\000\002" +
    "\022\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\003\000\002\033\004\000\002\034\005\000\002\034\002" +
    "\000\002\017\004\000\002\017\004\000\002\031\004\000" +
    "\002\031\003\000\002\031\004\000\002\031\003\000\002" +
    "\031\004\000\002\031\004\000\002\032\003\000\002\032" +
    "\003\000\002\003\003\000\002\003\002\000\002\002\004" +
    "\000\002\035\005\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\004\005\001\002\000\004\002\u0108\001" +
    "\002\000\004\015\006\001\002\000\004\026\007\001\002" +
    "\000\020\003\016\004\010\005\020\006\011\007\017\017" +
    "\014\027\uffb7\001\002\000\006\003\ufff4\010\ufff4\001\002" +
    "\000\006\003\ufff1\010\ufff1\001\002\000\006\027\uffb2\063" +
    "\025\001\002\000\004\027\035\001\002\000\006\003\ufff0" +
    "\010\ufff0\001\002\000\004\010\031\001\002\000\004\063" +
    "\uffb5\001\002\000\006\003\ufff2\010\ufff2\001\002\000\006" +
    "\003\ufff3\010\ufff3\001\002\000\004\027\uffb8\001\002\000" +
    "\004\063\023\001\002\000\014\004\010\005\020\006\011" +
    "\007\017\017\014\001\002\000\006\027\uffb2\063\025\001" +
    "\002\000\014\004\010\005\020\006\011\007\017\017\014" +
    "\001\002\000\004\027\uffb4\001\002\000\006\027\uffb2\063" +
    "\025\001\002\000\004\027\uffb3\001\002\000\010\020\033" +
    "\027\uffb0\063\uffb0\001\002\000\006\027\uffb1\063\uffb1\001" +
    "\002\000\004\021\034\001\002\000\006\027\uffaf\063\uffaf" +
    "\001\002\000\004\022\036\001\002\000\042\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\017\uffe8\031\uffe8\032\uffe8\037\uffe8\040" +
    "\uffe8\045\uffe8\001\002\000\042\003\071\004\010\005\020" +
    "\006\011\007\017\010\061\011\057\013\050\014\073\016" +
    "\053\017\014\031\060\032\051\037\065\040\070\045\046" +
    "\001\002\000\044\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\023\uffe4\031\uffe4\032\uffe4\037\uffe4\040\uffe4\045\uffe4\001" +
    "\002\000\044\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\023" +
    "\uffe9\031\uffe9\032\uffe9\037\uffe9\040\uffe9\045\uffe9\001\002" +
    "\000\044\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\023\uffe6" +
    "\031\uffe6\032\uffe6\037\uffe6\040\uffe6\045\uffe6\001\002\000" +
    "\044\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\023\uffdf\031" +
    "\uffdf\032\uffdf\037\uffdf\040\uffdf\045\uffdf\001\002\000\004" +
    "\062\u0106\001\002\000\044\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\023\uffe7\031\uffe7\032\uffe7\037\uffe7\040\uffe7\045" +
    "\uffe7\001\002\000\004\010\uff7d\001\002\000\006\003\374" +
    "\010\100\001\002\000\006\003\361\026\362\001\002\000" +
    "\004\026\350\001\002\000\044\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\023\uffe1\031\uffe1\032\uffe1\037\uffe1\040\uffe1" +
    "\045\uffe1\001\002\000\016\010\061\024\131\025\140\026" +
    "\134\036\127\062\213\001\002\000\004\062\332\001\002" +
    "\000\010\010\100\062\uffb9\063\uffb9\001\002\000\044\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\017\uffe5\023\uffe5\031\uffe5\032" +
    "\uffe5\037\uffe5\040\uffe5\045\uffe5\001\002\000\006\003\255" +
    "\026\256\001\002\000\004\026\245\001\002\000\066\010" +
    "\ufff8\020\202\021\ufff8\026\234\027\ufff8\030\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001" +
    "\002\000\004\010\100\001\002\000\044\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\031\uffe3\032\uffe3\037\uffe3" +
    "\040\uffe3\045\uffe3\001\002\000\044\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\023\uffe2\031\uffe2\032\uffe2\037\uffe2\040" +
    "\uffe2\045\uffe2\001\002\000\004\062\232\001\002\000\012" +
    "\010\100\030\226\062\uffb9\063\uffb9\001\002\000\044\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\017\uffe0\023\uffe0\031\uffe0\032" +
    "\uffe0\037\uffe0\040\uffe0\045\uffe0\001\002\000\004\010\uff7e" +
    "\001\002\000\044\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9" +
    "\023\uffd9\031\uffd9\032\uffd9\037\uffd9\040\uffd9\045\uffd9\001" +
    "\002\000\026\010\ufff5\030\ufff5\040\124\045\121\046\120" +
    "\047\126\050\123\051\122\062\ufff5\063\ufff5\001\002\000" +
    "\004\026\074\001\002\000\014\004\075\010\100\040\070" +
    "\045\046\062\uffa7\001\002\000\010\010\100\040\070\045" +
    "\046\001\002\000\004\027\205\001\002\000\004\062\uff9e" +
    "\001\002\000\032\010\ufff8\020\202\027\ufff8\030\ufff8\040" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\062\ufff8" +
    "\063\ufff8\001\002\000\004\062\uffa8\001\002\000\004\062" +
    "\103\001\002\000\006\010\104\062\uffa5\001\002\000\016" +
    "\052\171\053\166\054\165\055\164\056\170\057\167\001" +
    "\002\000\004\062\uffa6\001\002\000\004\062\107\001\002" +
    "\000\012\010\100\027\uffa3\040\070\045\046\001\002\000" +
    "\004\027\uffa4\001\002\000\016\040\124\045\121\046\120" +
    "\047\126\050\123\051\122\001\002\000\006\027\uff87\063" +
    "\114\001\002\000\004\027\uffa9\001\002\000\010\010\100" +
    "\040\070\045\046\001\002\000\004\027\uff89\001\002\000" +
    "\006\027\uff87\063\114\001\002\000\004\027\uff88\001\002" +
    "\000\014\010\061\024\131\025\140\026\134\036\127\001" +
    "\002\000\012\010\uff83\027\uff83\062\uff83\063\uff83\001\002" +
    "\000\014\010\061\024\131\025\140\026\134\036\127\001" +
    "\002\000\014\010\061\024\131\025\140\026\134\036\127" +
    "\001\002\000\012\010\uff81\027\uff81\062\uff81\063\uff81\001" +
    "\002\000\012\010\uff86\027\uff86\062\uff86\063\uff86\001\002" +
    "\000\014\010\061\024\131\025\140\026\134\036\127\001" +
    "\002\000\046\010\uffa0\021\uffa0\027\uffa0\030\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\001\002\000\042\010\uff92\021\uff92\027\uff92\030\uff92\041" +
    "\153\042\154\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001\002\000" +
    "\046\010\uffa2\021\uffa2\027\uffa2\030\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\001\002" +
    "\000\046\010\uff8d\021\uff8d\027\uff8d\030\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001" +
    "\002\000\046\010\uff8a\021\uff8a\027\uff8a\030\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\001\002\000\014\010\061\024\131\025\140\026\134\036" +
    "\127\001\002\000\046\010\uff8b\021\uff8b\027\uff8b\030\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\001\002\000\046\010\uff8e\021\uff8e\027\uff8e\030" +
    "\uff8e\041\uff8e\042\uff8e\043\143\044\141\052\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\001\002\000\012\010\uff84\027\uff84\062\uff84" +
    "\063\uff84\001\002\000\046\010\uffa1\021\uffa1\027\uffa1\030" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\001\002\000\014\010\061\024\131\025\140" +
    "\026\134\036\127\001\002\000\042\010\uff91\021\uff91\027" +
    "\uff91\030\uff91\041\uff91\042\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\001\002\000\014\010\061\024\131\025\140\026\134" +
    "\036\127\001\002\000\046\010\uff8e\021\uff8e\027\uff8e\030" +
    "\uff8e\041\uff8e\042\uff8e\043\143\044\141\052\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\001\002\000\042\010\uff90\021\uff90\027\uff90" +
    "\030\uff90\041\uff90\042\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\001\002\000\046\010\uff8e\021\uff8e\027\uff8e\030\uff8e\041" +
    "\uff8e\042\uff8e\043\143\044\141\052\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063" +
    "\uff8e\001\002\000\042\010\uff8f\021\uff8f\027\uff8f\030\uff8f" +
    "\041\uff8f\042\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\001\002" +
    "\000\004\027\151\001\002\000\046\010\uff8c\021\uff8c\027" +
    "\uff8c\030\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061" +
    "\uff8c\062\uff8c\063\uff8c\001\002\000\036\010\uff95\021\uff95" +
    "\027\uff95\030\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\001\002" +
    "\000\014\010\061\024\131\025\140\026\134\036\127\001" +
    "\002\000\014\010\061\024\131\025\140\026\134\036\127" +
    "\001\002\000\042\010\uff92\021\uff92\027\uff92\030\uff92\041" +
    "\153\042\154\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001\002\000" +
    "\036\010\uff93\021\uff93\027\uff93\030\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\001\002\000\042\010\uff92\021\uff92\027\uff92" +
    "\030\uff92\041\153\042\154\052\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92" +
    "\001\002\000\036\010\uff94\021\uff94\027\uff94\030\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\001\002\000\012\010\uff7f\027" +
    "\uff7f\062\uff7f\063\uff7f\001\002\000\012\010\uff80\027\uff80" +
    "\062\uff80\063\uff80\001\002\000\012\010\uff82\027\uff82\062" +
    "\uff82\063\uff82\001\002\000\014\010\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\036\uffc9\001\002\000\014\010\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\036\uffc6\001\002\000\014\010\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\036\uffc7\001\002\000\014\010\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\036\uffc5\001\002\000\014\010\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\036\uffc4\001\002\000\014\010" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\036\uffc8\001\002\000\014" +
    "\010\061\024\131\025\140\026\134\036\127\001\002\000" +
    "\006\062\uff98\063\174\001\002\000\004\010\176\001\002" +
    "\000\004\062\uff9a\001\002\000\016\052\171\053\166\054" +
    "\165\055\164\056\170\057\167\001\002\000\014\010\061" +
    "\024\131\025\140\026\134\036\127\001\002\000\006\062" +
    "\uff98\063\174\001\002\000\004\062\uff99\001\002\000\014" +
    "\010\061\024\131\025\140\026\134\036\127\001\002\000" +
    "\004\021\204\001\002\000\062\010\ufff7\021\ufff7\027\ufff7" +
    "\030\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\004\022\206\001\002\000\044" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\023\uffe8\031\uffe8" +
    "\032\uffe8\037\uffe8\040\uffe8\045\uffe8\001\002\000\044\003" +
    "\071\004\010\005\020\006\011\007\017\010\061\011\057" +
    "\013\050\014\073\016\210\017\014\023\211\031\060\032" +
    "\051\037\065\040\070\045\046\001\002\000\016\010\061" +
    "\024\131\025\140\026\134\036\127\062\213\001\002\000" +
    "\044\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\023\uffaa\031" +
    "\uffaa\032\uffaa\037\uffaa\040\uffaa\045\uffaa\001\002\000\004" +
    "\062\214\001\002\000\044\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\016\uffee" +
    "\017\uffee\023\uffee\031\uffee\032\uffee\037\uffee\040\uffee\045" +
    "\uffee\001\002\000\044\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\016\uffed\017" +
    "\uffed\023\uffed\031\uffed\032\uffed\037\uffed\040\uffed\045\uffed" +
    "\001\002\000\006\062\uff9b\063\216\001\002\000\012\004" +
    "\220\010\100\040\070\045\046\001\002\000\004\062\uff9f" +
    "\001\002\000\010\010\100\040\070\045\046\001\002\000" +
    "\004\062\uff9c\001\002\000\006\062\uff9b\063\216\001\002" +
    "\000\004\062\uff9d\001\002\000\006\062\uffbc\063\uffbc\001" +
    "\002\000\012\010\ufff5\030\ufff5\062\ufff5\063\ufff5\001\002" +
    "\000\014\010\061\024\131\025\140\026\134\036\127\001" +
    "\002\000\012\010\100\030\226\062\uffb9\063\uffb9\001\002" +
    "\000\006\062\uffba\063\uffba\001\002\000\012\010\ufff6\030" +
    "\ufff6\062\ufff6\063\ufff6\001\002\000\044\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014" +
    "\uffef\016\uffef\017\uffef\023\uffef\031\uffef\032\uffef\037\uffef" +
    "\040\uffef\045\uffef\001\002\000\012\010\uff85\027\uff85\062" +
    "\uff85\063\uff85\001\002\000\016\010\061\024\131\025\140" +
    "\026\134\027\uff7b\036\127\001\002\000\004\027\uff7c\001" +
    "\002\000\004\027\244\001\002\000\006\027\uff78\063\240" +
    "\001\002\000\014\010\061\024\131\025\140\026\134\036" +
    "\127\001\002\000\004\027\uff7a\001\002\000\006\027\uff78" +
    "\063\240\001\002\000\004\027\uff79\001\002\000\046\010" +
    "\uff97\021\uff97\027\uff97\030\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\060\uff97\061\uff97\062\uff97\063\uff97\001\002\000\004" +
    "\025\246\001\002\000\006\027\250\063\247\001\002\000" +
    "\014\010\061\024\131\025\140\026\134\036\127\001\002" +
    "\000\004\062\251\001\002\000\044\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\016\uffdb\017\uffdb\023\uffdb\031\uffdb\032\uffdb\037\uffdb\040" +
    "\uffdb\045\uffdb\001\002\000\004\027\253\001\002\000\004" +
    "\062\254\001\002\000\044\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc" +
    "\017\uffdc\023\uffdc\031\uffdc\032\uffdc\037\uffdc\040\uffdc\045" +
    "\uffdc\001\002\000\004\027\uffeb\001\002\000\020\003\262" +
    "\010\061\024\131\025\140\026\260\032\051\036\127\001" +
    "\002\000\010\027\uffc2\060\321\061\322\001\002\000\016" +
    "\003\315\010\061\024\131\025\140\026\260\036\127\001" +
    "\002\000\016\003\315\010\061\024\131\025\140\026\260" +
    "\036\127\001\002\000\026\003\uffd9\010\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\036\uffd9\052\uffd1\053\uffcf\054\uffcb\055\uffcd" +
    "\001\002\000\016\052\171\053\166\054\165\055\164\056" +
    "\170\057\167\001\002\000\004\027\265\001\002\000\004" +
    "\022\267\001\002\000\044\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\016\uffec" +
    "\017\uffec\023\uffec\031\uffec\032\uffec\037\uffec\040\uffec\045" +
    "\uffec\001\002\000\044\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\023\uffe8\031\uffe8\032\uffe8\037\uffe8\040\uffe8\045\uffe8" +
    "\001\002\000\044\003\071\004\010\005\020\006\011\007" +
    "\017\010\061\011\057\013\050\014\073\016\210\017\014" +
    "\023\271\031\060\032\051\037\065\040\070\045\046\001" +
    "\002\000\046\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\272\013\uffde\014\uffde\016\uffde\017" +
    "\uffde\023\uffde\031\uffde\032\uffde\037\uffde\040\uffde\045\uffde" +
    "\001\002\000\004\022\273\001\002\000\044\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\017\uffe8\023\uffe8\031\uffe8\032\uffe8\037" +
    "\uffe8\040\uffe8\045\uffe8\001\002\000\044\003\071\004\010" +
    "\005\020\006\011\007\017\010\061\011\057\013\050\014" +
    "\073\016\210\017\014\023\275\031\060\032\051\037\065" +
    "\040\070\045\046\001\002\000\044\003\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\023\uffdd\031\uffdd\032\uffdd\037\uffdd\040" +
    "\uffdd\045\uffdd\001\002\000\014\010\061\024\131\025\140" +
    "\026\134\036\127\001\002\000\010\027\uffd3\060\uffd3\061" +
    "\uffd3\001\002\000\004\052\312\001\002\000\004\054\310" +
    "\001\002\000\004\055\306\001\002\000\004\053\304\001" +
    "\002\000\014\010\061\024\131\025\140\026\134\036\127" +
    "\001\002\000\010\027\uffce\060\uffce\061\uffce\001\002\000" +
    "\014\010\061\024\131\025\140\026\134\036\127\001\002" +
    "\000\010\027\uffcc\060\uffcc\061\uffcc\001\002\000\014\010" +
    "\061\024\131\025\140\026\134\036\127\001\002\000\010" +
    "\027\uffca\060\uffca\061\uffca\001\002\000\014\010\061\024" +
    "\131\025\140\026\134\036\127\001\002\000\010\027\uffd0" +
    "\060\uffd0\061\uffd0\001\002\000\004\027\uffd4\001\002\000" +
    "\012\052\uffd1\053\uffcf\054\uffcb\055\uffcd\001\002\000\004" +
    "\027\320\001\002\000\020\027\151\052\171\053\166\054" +
    "\165\055\164\056\170\057\167\001\002\000\010\027\uffd2" +
    "\060\uffd2\061\uffd2\001\002\000\020\003\uffc1\010\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\032\uffc1\036\uffc1\001\002\000\020" +
    "\003\uffc0\010\uffc0\024\uffc0\025\uffc0\026\uffc0\032\uffc0\036" +
    "\uffc0\001\002\000\020\003\262\010\061\024\131\025\140" +
    "\026\260\032\051\036\127\001\002\000\004\027\uffd5\001" +
    "\002\000\004\027\uffc3\001\002\000\004\027\327\001\002" +
    "\000\004\022\267\001\002\000\044\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea" +
    "\016\uffea\017\uffea\023\uffea\031\uffea\032\uffea\037\uffea\040" +
    "\uffea\045\uffea\001\002\000\006\062\uffbb\063\uffbb\001\002" +
    "\000\044\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\013\uff96\014\uff96\016\uff96\017\uff96\023\uff96" +
    "\031\uff96\032\uff96\037\uff96\040\uff96\045\uff96\001\002\000" +
    "\004\062\334\001\002\000\044\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\016" +
    "\uffed\017\uffed\023\335\031\uffed\032\uffed\037\uffed\040\uffed" +
    "\045\uffed\001\002\000\016\002\uffbe\004\010\005\020\006" +
    "\011\007\017\017\014\001\002\000\004\002\001\001\002" +
    "\000\004\010\340\001\002\000\004\026\341\001\002\000" +
    "\020\003\016\004\010\005\020\006\011\007\017\017\014" +
    "\027\uffb7\001\002\000\004\027\343\001\002\000\004\022" +
    "\344\001\002\000\044\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\023\uffe8\031\uffe8\032\uffe8\037\uffe8\040\uffe8\045\uffe8" +
    "\001\002\000\044\003\071\004\010\005\020\006\011\007" +
    "\017\010\061\011\057\013\050\014\073\016\210\017\014" +
    "\023\346\031\060\032\051\037\065\040\070\045\046\001" +
    "\002\000\016\002\uffbe\004\010\005\020\006\011\007\017" +
    "\017\014\001\002\000\004\002\uffbf\001\002\000\010\033" +
    "\353\034\352\035\354\001\002\000\004\063\355\001\002" +
    "\000\004\063\uffd7\001\002\000\004\063\uffd8\001\002\000" +
    "\004\063\uffd6\001\002\000\004\010\100\001\002\000\004" +
    "\027\357\001\002\000\004\062\360\001\002\000\054\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\031\uffda\032\uffda\036\uffda\037\uffda\040\uffda" +
    "\045\uffda\001\002\000\004\027\uffad\001\002\000\020\003" +
    "\262\010\061\024\131\025\140\026\260\032\051\036\127" +
    "\001\002\000\004\027\364\001\002\000\004\022\366\001" +
    "\002\000\044\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\013\uffae\014\uffae\016\uffae\017\uffae\023" +
    "\uffae\031\uffae\032\uffae\037\uffae\040\uffae\045\uffae\001\002" +
    "\000\044\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\023\uffe8" +
    "\031\uffe8\032\uffe8\037\uffe8\040\uffe8\045\uffe8\001\002\000" +
    "\044\003\071\004\010\005\020\006\011\007\017\010\061" +
    "\011\057\013\050\014\073\016\210\017\014\023\370\031" +
    "\060\032\051\037\065\040\070\045\046\001\002\000\044" +
    "\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\013\uffab\014\uffab\016\uffab\017\uffab\023\uffab\031\uffab" +
    "\032\uffab\037\uffab\040\uffab\045\uffab\001\002\000\004\027" +
    "\372\001\002\000\042\003\071\004\010\005\020\006\011" +
    "\007\017\010\061\011\057\013\050\014\073\016\210\017" +
    "\014\031\060\032\051\037\065\040\070\045\046\001\002" +
    "\000\044\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\013\uffac\014\uffac\016\uffac\017\uffac\023\uffac" +
    "\031\uffac\032\uffac\037\uffac\040\uffac\045\uffac\001\002\000" +
    "\044\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\031\ufffc\032" +
    "\ufffc\037\ufffc\040\ufffc\045\ufffc\062\ufffe\001\002\000\006" +
    "\062\u0100\063\377\001\002\000\010\030\226\062\ufff9\063" +
    "\ufff9\001\002\000\004\010\100\001\002\000\044\003\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013" +
    "\uffff\014\uffff\016\uffff\017\uffff\023\uffff\031\uffff\032\uffff" +
    "\037\uffff\040\uffff\045\uffff\001\002\000\010\030\226\062" +
    "\ufffa\063\ufffa\001\002\000\042\003\071\004\010\005\020" +
    "\006\011\007\017\010\061\011\057\013\050\014\073\016" +
    "\210\017\014\031\060\032\051\037\065\040\070\045\046" +
    "\001\002\000\004\062\u0104\001\002\000\044\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\016\ufffd\017\ufffd\023\ufffd\031\ufffd\032\ufffd\037" +
    "\ufffd\040\ufffd\045\ufffd\001\002\000\044\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\023\ufffb\031\ufffb\032\ufffb\037\ufffb" +
    "\040\ufffb\045\ufffb\001\002\000\044\003\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\023\uffbd\031\uffbd\032\uffbd\037\uffbd\040" +
    "\uffbd\045\uffbd\001\002\000\004\027\uffb6\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\043\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\045\020\047\011" +
    "\050\012\063\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\031\001\001\000\004\100\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\047\023\063\014\001\001\000" +
    "\004\046\025\001\001\000\006\047\026\063\014\001\001" +
    "\000\002\001\001\000\004\046\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\036\001" +
    "\001\000\044\004\043\006\055\017\054\024\062\025\053" +
    "\026\037\030\044\032\061\040\041\051\066\054\042\055" +
    "\040\063\046\064\071\065\063\066\065\070\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\064\224\066\375\067\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\134\020\332\022\135\025\132\061\127\064\131\001" +
    "\001\000\002\001\001\000\010\005\330\064\224\066\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\223\064\224\066\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\124\001\001\000" +
    "\002\001\001\000\022\004\076\013\101\016\075\017\054" +
    "\032\061\036\100\064\071\066\065\001\001\000\014\004" +
    "\214\017\054\032\061\064\071\066\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\104\014\105\001\001" +
    "\000\004\053\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\112\017\111\032\061\033\107\064\110" +
    "\001\001\000\002\001\001\000\004\031\124\001\001\000" +
    "\004\034\114\001\001\000\002\001\001\000\010\017\115" +
    "\032\061\064\110\001\001\000\002\001\001\000\004\034" +
    "\116\001\001\000\002\001\001\000\016\012\134\020\162" +
    "\022\135\025\132\061\127\064\131\001\001\000\002\001" +
    "\001\000\016\012\134\020\161\022\135\025\132\061\127" +
    "\064\131\001\001\000\016\012\134\020\160\022\135\025" +
    "\132\061\127\064\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\134\020\136\022\135\025\132\061" +
    "\127\064\131\001\001\000\002\001\001\000\004\021\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\134\020\147\022\135\025\132\061\127" +
    "\064\131\001\001\000\002\001\001\000\004\062\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\134" +
    "\022\145\025\132\064\131\001\001\000\002\001\001\000" +
    "\012\012\134\022\143\025\132\064\131\001\001\000\004" +
    "\062\144\001\001\000\002\001\001\000\004\062\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\134\022\135\025\132\061" +
    "\156\064\131\001\001\000\014\012\134\022\135\025\132" +
    "\061\154\064\131\001\001\000\004\021\155\001\001\000" +
    "\002\001\001\000\004\021\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\134\020\172\022\135\025\132\061\127\064\131\001\001" +
    "\000\004\011\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\176\001\001\000\016\012\134\020\177" +
    "\022\135\025\132\061\127\064\131\001\001\000\004\011" +
    "\200\001\001\000\002\001\001\000\016\012\134\020\202" +
    "\022\135\025\132\061\127\064\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\206" +
    "\001\001\000\044\004\043\006\055\017\054\024\062\025" +
    "\053\026\037\030\044\032\061\040\041\051\066\054\042" +
    "\055\040\063\046\064\071\065\063\066\065\070\051\001" +
    "\001\000\016\012\134\020\211\022\135\025\132\061\127" +
    "\064\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\216\001\001" +
    "\000\014\004\220\017\054\032\061\064\071\066\065\001" +
    "\001\000\002\001\001\000\014\004\221\017\054\032\061" +
    "\064\071\066\065\001\001\000\002\001\001\000\004\037" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\134\020\230\022\135\025\132\061" +
    "\127\064\131\001\001\000\010\005\227\064\224\066\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\234\003\235\012\134" +
    "\020\236\022\135\025\132\061\127\064\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\240\001\001" +
    "\000\016\012\134\020\241\022\135\025\132\061\127\064" +
    "\131\001\001\000\002\001\001\000\004\035\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\134\020\251\022\135\025\132" +
    "\061\127\064\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\325\001\001\000\024\007\263\012\134\020" +
    "\262\022\135\025\132\052\256\054\260\061\127\064\131" +
    "\001\001\000\006\041\323\042\322\001\001\000\020\012" +
    "\134\020\316\022\135\025\132\052\315\061\127\064\131" +
    "\001\001\000\020\012\134\020\262\022\135\025\132\052" +
    "\313\061\127\064\131\001\001\000\012\074\277\075\302" +
    "\076\301\077\300\001\001\000\004\053\275\001\001\000" +
    "\002\001\001\000\004\056\265\001\001\000\002\001\001" +
    "\000\004\060\267\001\001\000\044\004\043\006\055\017" +
    "\054\024\062\025\053\026\037\030\044\032\061\040\041" +
    "\051\066\054\042\055\040\063\046\064\071\065\063\066" +
    "\065\070\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\273\001\001\000\044\004\043\006\055\017" +
    "\054\024\062\025\053\026\037\030\044\032\061\040\041" +
    "\051\066\054\042\055\040\063\046\064\071\065\063\066" +
    "\065\070\051\001\001\000\002\001\001\000\016\012\134" +
    "\020\276\022\135\025\132\061\127\064\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\134\020\304\022" +
    "\135\025\132\061\127\064\131\001\001\000\002\001\001" +
    "\000\016\012\134\020\306\022\135\025\132\061\127\064" +
    "\131\001\001\000\002\001\001\000\016\012\134\020\310" +
    "\022\135\025\132\061\127\064\131\001\001\000\002\001" +
    "\001\000\016\012\134\020\312\022\135\025\132\061\127" +
    "\064\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\074\277\075\302\076\301\077\300\001\001\000\002" +
    "\001\001\000\004\053\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\324\012\134" +
    "\020\262\022\135\025\132\052\256\054\260\061\127\064" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\335\063\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\020" +
    "\047\011\050\341\063\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\344\001\001\000\044\004\043" +
    "\006\055\017\054\024\062\025\053\026\037\030\044\032" +
    "\061\040\041\051\066\054\042\055\040\063\046\064\071" +
    "\065\063\066\065\070\051\001\001\000\006\027\346\063" +
    "\336\001\001\000\002\001\001\000\004\023\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\370\001" +
    "\001\000\024\007\362\012\134\020\262\022\135\025\132" +
    "\052\256\054\260\061\127\064\131\001\001\000\002\001" +
    "\001\000\004\057\364\001\001\000\002\001\001\000\004" +
    "\060\366\001\001\000\044\004\043\006\055\017\054\024" +
    "\062\025\053\026\037\030\044\032\061\040\041\051\066" +
    "\054\042\055\040\063\046\064\071\065\063\066\065\070" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\043\006\055\017\054\024\062\025\053\026\037\030" +
    "\044\032\061\040\041\051\066\054\042\055\372\063\046" +
    "\064\071\065\063\066\065\070\051\001\001\000\002\001" +
    "\001\000\006\071\u0102\072\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\064\224\066\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\043\006\055" +
    "\017\054\024\062\025\053\026\037\030\044\032\061\040" +
    "\041\051\066\054\042\055\u0104\063\046\064\071\065\063" +
    "\066\065\070\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
        {
         //report_fatal_error("Fatal Error: " + s.value, null);
        }
       



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arg_listP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_listP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arg_listP ::= COMA expr arg_listP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_listP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arg_list ::= expr arg_listP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // args ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // args ::= arg_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inc_special ::= MENOSMENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_special",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // inc_special ::= MASMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_special",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inc ::= MULTIIGUAL expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inc ::= DIVIGUAL expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // inc ::= MASMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // inc ::= MASIGUAL expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // inc ::= MENOSMENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // inc ::= MENOSIGUAL expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_increment ::= inc_special variable 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_increment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_increment ::= variable inc 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_increment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // incrementP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // incrementP ::= COMA expr_increment incrementP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // increment ::= expr_increment incrementP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= PARENTESISIZQUIERDO expr PARENTESISDERECHO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // termP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // termP ::= OPERADORDIV factor termP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // termP ::= OPERADORMULTIPLICACION factor termP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termP",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= factor termP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exprP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exprP ::= OPERADORRESTA term exprP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exprP ::= OPERADORSUMA term exprP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= term exprP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function_call_statement ::= function_call PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // function_call ::= ID PARENTESISIZQUIERDO args PARENTESISDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conditionP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditionP ::= COMA ID relational_operators expr conditionP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condition ::= ID relational_operators expr conditionP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // init_forP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_forP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // init_forP ::= COMA assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_forP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // init_forP ::= COMA INT assignment_expression init_forP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_forP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // init_for ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // init_for ::= INT assignment_expression init_forP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constant ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // constant ::= CONSTSTR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // constant ::= CONSTCHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E3 ::= increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E2 ::= condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E1 ::= init_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_for ::= E1 PUNTOYCOMA E2 PUNTOYCOMA E3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_statement ::= FOR PARENTESISIZQUIERDO expr_for PARENTESISDERECHO LLAVEIZQUIERDA statement_list LLAVEDERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement_inside_while ::= LLAVEIZQUIERDA statement_list LLAVEDERECHA 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_inside_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // while_statement ::= WHILE error NT$8 PARENTESISDERECHO statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression" , "ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // while_statement ::= WHILE PARENTESISIZQUIERDO boolean_expression PARENTESISDERECHO statement_inside_while 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // param_id ::= ID CORCHETEIZQUIERDO CORCHETEDERECHO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_id",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // param_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_id",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // param_type_list ::= type param_id 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_type_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // param_listP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_listP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // param_listP ::= COMA param_type_list param_listP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_listP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // param_list ::= error NT$7 COMA param_type_list param_listP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error("formal_parameter_list","ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // param_list ::= param_type_list param_listP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // params ::= param_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_expressionP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expressionP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_expressionP ::= variable_initialization assignment_expressionP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expressionP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_expression ::= expr_increment assignment_expressionP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_expression ::= variable_initialization assignment_expressionP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment_statement ::= assignment_expression PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // function_definition ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // function_definition ::= type ID PARENTESISIZQUIERDO params PARENTESISDERECHO LLAVEIZQUIERDA statement_list LLAVEDERECHA function_definition 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logical_operators ::= OROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logical_operators ::= ANDAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logical_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logical_expression ::= logical_operators boolean_expression 
            {
              Object RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relational_operators ::= NOTIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relational_operators ::= IGUALQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relational_operators ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relational_operators ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relational_operators ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relational_operators ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operators",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relational_expression ::= error NT$6 MAYORIGUAL expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error("relational_expression" ,"ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relational_expression ::= error NT$5 MENORIGUAL expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error("relational_expression","ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relational_expression ::= error NT$4 MAYORQUE expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("relational_expression","ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relational_expression ::= error NT$3 MENORQUE expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error("relational_expression","ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relational_expression ::= PARENTESISIZQUIERDO relational_expression PARENTESISDERECHO 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relational_expression ::= expr relational_operators expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean_expression ::= scanf_statement relational_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean_expression ::= relational_expression logical_expression 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // flags ::= PERCENTAGECHART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flags",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // flags ::= PERCENTAGESTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flags",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // flags ::= PERCENTAGEDIGIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flags",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // scanf_statement ::= error 
            {
              Object RESULT =null;
		 parser.report_error("scanf_statement","ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf_statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // scanf_statement ::= SCANF PARENTESISIZQUIERDO flags COMA variable PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf_statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // printf_statement ::= PRINTF PARENTESISIZQUIERDO CONSTSTR PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf_statement",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // printf_statement ::= PRINTF PARENTESISIZQUIERDO CONSTSTR COMA expr PARENTESISDERECHO PUNTOYCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf_statement",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_inside_if ::= LLAVEIZQUIERDA statement_list LLAVEDERECHA ELSE LLAVEIZQUIERDA statement_list LLAVEDERECHA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_inside_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_inside_if ::= LLAVEIZQUIERDA statement_list LLAVEDERECHA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_inside_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= scanf_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= printf_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= while_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= variable_declaration 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= function_call_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= assignment_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= jump_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= if_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_statement ::= IF error NT$2 PARENTESISDERECHO statement_inside_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression" ,"ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_statement ::= IF PARENTESISIZQUIERDO boolean_expression PARENTESISDERECHO statement_inside_if 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // jump_statement ::= RETURN expr PUNTOYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // jump_statement ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // jump_statement ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INTPUNT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= CHARPUNT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_initialization ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_initialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_initialization ::= variable_initialization IGUAL expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_initialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= ID CORCHETEIZQUIERDO expr CORCHETEDERECHO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_list ::= variable_initialization 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_list ::= variable_list COMA variable_initialization 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_declaration ::= type error NT$1 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators" ,"ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_declaration ::= type error NT$0 PUNTOYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators" ,"ERROR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // variable_declaration ::= type variable_list PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Main_Function EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Main_Function ::= INT MAIN PARENTESISIZQUIERDO params PARENTESISDERECHO LLAVEIZQUIERDA statement_list RETURN expr PUNTOYCOMA LLAVEDERECHA function_definition 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main_Function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


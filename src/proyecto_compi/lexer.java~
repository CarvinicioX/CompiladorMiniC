/* The following code was generated by JFlex 1.6.1 */

package proyecto_compi;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/proyecto_compi/lexer.flex</tt>
 */
public class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\62\1\62\1\2\22\0\1\5\1\22\1\13"+
    "\2\0\1\23\1\54\1\12\1\30\1\31\1\7\1\32\1\36\1\33"+
    "\1\0\1\6\12\1\1\14\1\55\1\35\1\21\1\34\1\14\1\0"+
    "\32\10\1\50\1\14\1\51\1\0\1\15\1\0\1\40\1\60\1\25"+
    "\1\24\1\44\1\42\1\10\1\37\1\27\1\10\1\61\1\56\1\43"+
    "\1\16\1\47\1\41\1\10\1\20\1\26\1\17\1\45\1\46\1\57"+
    "\3\10\1\52\1\11\1\53\7\0\1\62\32\0\1\14\11\0\1\14"+
    "\12\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14\1\0\u01ca\14"+
    "\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\21\0\165\14"+
    "\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14"+
    "\1\0\1\14\1\0\24\14\1\0\123\14\1\0\213\14\1\0\255\14"+
    "\1\0\46\14\2\0\1\14\7\0\47\14\11\0\55\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\14\10\0\33\14\5\0\3\14"+
    "\35\0\13\14\5\0\100\14\12\14\4\0\146\14\1\0\10\14\2\0"+
    "\12\14\1\0\6\14\12\14\3\14\2\0\1\14\20\0\73\14\2\0"+
    "\145\14\16\0\12\14\54\14\4\0\1\14\5\0\56\14\22\0\34\14"+
    "\104\0\23\14\61\0\200\14\2\0\12\14\1\0\23\14\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14"+
    "\2\0\11\14\2\0\2\14\2\0\4\14\10\0\1\14\4\0\2\14"+
    "\1\0\5\14\2\0\12\14\2\14\17\0\3\14\1\0\6\14\4\0"+
    "\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0\2\14\1\0"+
    "\2\14\2\0\1\14\1\0\5\14\4\0\2\14\2\0\3\14\3\0"+
    "\1\14\7\0\4\14\1\0\1\14\7\0\12\14\6\14\13\0\3\14"+
    "\1\0\11\14\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\5\14\2\0\12\14\1\0\3\14\1\0\3\14\2\0\1\14"+
    "\17\0\4\14\2\0\12\14\21\0\3\14\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\11\14"+
    "\2\0\2\14\2\0\3\14\10\0\2\14\4\0\2\14\1\0\5\14"+
    "\2\0\12\14\1\0\1\14\20\0\2\14\1\0\6\14\3\0\3\14"+
    "\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14"+
    "\3\0\3\14\3\0\14\14\4\0\5\14\3\0\3\14\1\0\4\14"+
    "\2\0\1\14\6\0\1\14\16\0\12\14\20\0\4\14\1\0\10\14"+
    "\1\0\3\14\1\0\27\14\1\0\20\14\3\0\10\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\1\0\2\14\6\0\4\14\2\0\12\14"+
    "\21\0\3\14\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14"+
    "\1\0\5\14\2\0\11\14\1\0\3\14\1\0\4\14\7\0\2\14"+
    "\7\0\1\14\1\0\4\14\2\0\12\14\1\0\2\14\16\0\3\14"+
    "\1\0\10\14\1\0\3\14\1\0\51\14\2\0\10\14\1\0\3\14"+
    "\1\0\5\14\10\0\1\14\10\0\4\14\2\0\12\14\12\0\6\14"+
    "\2\0\2\14\1\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14"+
    "\2\0\7\14\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14"+
    "\6\0\12\14\2\0\2\14\15\0\72\14\5\0\17\14\1\0\12\14"+
    "\47\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14"+
    "\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14"+
    "\2\0\2\14\1\0\15\14\1\0\3\14\2\0\5\14\1\0\1\14"+
    "\1\0\6\14\2\0\12\14\2\0\4\14\40\0\1\14\27\0\2\14"+
    "\6\0\12\14\13\0\1\14\1\0\1\14\1\0\1\14\4\0\12\14"+
    "\1\0\44\14\4\0\24\14\1\0\22\14\1\0\44\14\11\0\1\14"+
    "\71\0\100\14\12\14\6\0\100\14\12\14\4\14\2\0\46\14\1\0"+
    "\1\14\5\0\1\14\2\0\53\14\1\0\u014d\14\1\0\4\14\2\0"+
    "\7\14\1\0\1\14\1\0\4\14\2\0\51\14\1\0\4\14\2\0"+
    "\41\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0"+
    "\17\14\1\0\71\14\1\0\4\14\2\0\103\14\2\0\3\14\40\0"+
    "\20\14\20\0\125\14\14\0\u026c\14\2\0\21\14\1\14\32\14\5\0"+
    "\113\14\3\0\13\14\7\0\15\14\1\0\7\14\13\0\25\14\13\0"+
    "\24\14\14\0\15\14\1\0\3\14\1\0\2\14\14\0\124\14\3\0"+
    "\1\14\4\0\2\14\2\0\12\14\41\0\3\14\2\0\12\14\6\0"+
    "\130\14\10\0\53\14\5\0\106\14\12\0\37\14\1\0\14\14\4\0"+
    "\14\14\12\0\12\14\36\14\2\0\5\14\13\0\54\14\4\0\32\14"+
    "\6\0\12\14\46\0\34\14\4\0\77\14\1\0\35\14\2\0\1\14"+
    "\12\14\6\0\12\14\15\0\1\14\10\0\17\14\101\0\114\14\4\0"+
    "\12\14\21\0\11\14\14\0\60\14\12\14\72\14\14\0\70\14\10\0"+
    "\12\14\3\0\3\14\12\14\44\14\122\0\3\14\1\0\43\14\1\0"+
    "\2\14\6\0\366\14\6\0\u011a\14\2\0\6\14\2\0\46\14\2\0"+
    "\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\37\14\2\0\65\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0"+
    "\7\14\3\0\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0"+
    "\7\14\3\0\13\14\35\0\1\62\1\62\5\0\1\14\17\0\2\14"+
    "\23\0\1\14\12\0\1\14\21\0\1\14\15\0\1\14\20\0\15\14"+
    "\63\0\41\14\21\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14"+
    "\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14"+
    "\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0\51\14"+
    "\u032d\0\64\14\u0716\0\57\14\1\0\57\14\1\0\205\14\6\0\11\14"+
    "\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0\1\14"+
    "\17\0\30\14\11\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\40\14"+
    "\57\0\1\14\u01d0\0\1\14\4\0\3\14\31\0\17\14\1\0\5\14"+
    "\2\0\5\14\4\0\126\14\2\0\2\14\2\0\3\14\1\0\132\14"+
    "\1\0\4\14\5\0\51\14\3\0\136\14\21\0\33\14\65\0\20\14"+
    "\u0200\0\u19b6\14\112\0\u51cd\14\63\0\u048d\14\103\0\56\14\2\0\u010d\14"+
    "\3\0\20\14\12\14\2\14\24\0\63\14\1\0\12\14\1\0\37\14"+
    "\1\0\123\14\45\0\11\14\2\0\147\14\2\0\4\14\1\0\36\14"+
    "\2\0\2\14\105\0\61\14\30\0\64\14\14\0\105\14\13\0\12\14"+
    "\6\0\30\14\3\0\1\14\4\0\12\14\44\14\2\0\44\14\14\0"+
    "\35\14\3\0\101\14\16\0\1\14\12\14\6\0\20\14\12\14\5\14"+
    "\1\0\67\14\11\0\16\14\2\0\12\14\6\0\27\14\3\0\111\14"+
    "\30\0\3\14\2\0\20\14\2\0\5\14\12\0\6\14\2\0\6\14"+
    "\2\0\6\14\11\0\7\14\1\0\7\14\1\0\53\14\1\0\4\14"+
    "\4\0\2\14\132\0\53\14\1\0\2\14\2\0\12\14\6\0\u2ba4\14"+
    "\14\0\27\14\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14"+
    "\14\0\5\14\5\0\14\14\1\0\15\14\1\0\5\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14"+
    "\2\0\66\14\50\0\14\14\4\0\20\14\20\0\16\14\5\0\2\14"+
    "\30\0\3\14\40\0\5\14\1\0\207\14\23\0\12\14\7\0\32\14"+
    "\4\0\1\14\1\0\32\14\13\0\131\14\3\0\6\14\2\0\6\14"+
    "\2\0\6\14\2\0\3\14\43\0\14\14\1\0\32\14\1\0\23\14"+
    "\1\0\2\14\1\0\17\14\2\0\16\14\42\0\173\14\105\0\65\14"+
    "\210\0\1\14\202\0\35\14\3\0\61\14\17\0\1\14\37\0\40\14"+
    "\20\0\33\14\5\0\53\14\5\0\36\14\2\0\44\14\4\0\10\14"+
    "\1\0\5\14\52\0\236\14\2\0\12\14\126\0\50\14\10\0\64\14"+
    "\234\0\u0137\14\11\0\26\14\12\0\10\14\230\0\6\14\2\0\1\14"+
    "\1\0\54\14\1\0\2\14\3\0\1\14\2\0\27\14\12\0\27\14"+
    "\11\0\37\14\141\0\26\14\12\0\32\14\106\0\70\14\6\0\2\14"+
    "\100\0\4\14\1\0\2\14\5\0\10\14\1\0\3\14\1\0\33\14"+
    "\4\0\3\14\4\0\1\14\40\0\35\14\3\0\35\14\43\0\10\14"+
    "\1\0\36\14\31\0\66\14\12\0\26\14\12\0\23\14\15\0\22\14"+
    "\156\0\111\14\u03b7\0\107\14\37\0\12\14\17\0\74\14\25\0\31\14"+
    "\7\0\12\14\6\0\65\14\1\0\12\14\20\0\44\14\2\0\1\14"+
    "\11\0\105\14\13\0\12\14\1\14\45\0\22\14\1\0\45\14\170\0"+
    "\73\14\5\0\12\14\7\0\3\14\1\0\10\14\2\0\2\14\2\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\11\14\2\0"+
    "\2\14\2\0\3\14\11\0\1\14\5\0\7\14\2\0\7\14\3\0"+
    "\5\14\u010b\0\106\14\1\0\1\14\10\0\12\14\246\0\66\14\2\0"+
    "\11\14\77\0\101\14\3\0\1\14\13\0\12\14\46\0\70\14\10\0"+
    "\12\14\u01d6\0\100\14\12\14\25\0\1\14\u01c0\0\71\14\u0507\0\u0399\14"+
    "\147\0\157\14\u0b91\0\u042f\14\u33d1\0\u0239\14\7\0\37\14\1\0\12\14"+
    "\146\0\36\14\2\0\5\14\13\0\67\14\11\0\4\14\14\0\12\14"+
    "\11\0\25\14\5\0\23\14\u0370\0\105\14\13\0\57\14\20\0\21\14"+
    "\u4060\0\2\14\u0bfe\0\153\14\5\0\15\14\3\0\11\14\7\0\12\14"+
    "\3\0\2\14\u14c6\0\5\14\3\0\6\14\10\0\10\14\2\0\7\14"+
    "\36\0\4\14\224\0\3\14\u01bb\0\125\14\1\0\107\14\1\0\2\14"+
    "\2\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14"+
    "\1\0\7\14\1\0\101\14\1\0\4\14\2\0\10\14\1\0\7\14"+
    "\1\0\34\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\7\14"+
    "\1\0\u0154\14\2\0\31\14\1\0\31\14\1\0\37\14\1\0\31\14"+
    "\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14"+
    "\1\0\31\14\1\0\10\14\2\0\62\14\u1000\0\305\14\13\0\7\14"+
    "\u0529\0\4\14\1\0\33\14\1\0\2\14\1\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14"+
    "\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14"+
    "\1\0\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14"+
    "\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\21\14"+
    "\5\0\3\14\1\0\5\14\1\0\21\14\u0274\0\32\14\6\0\32\14"+
    "\6\0\32\14\u0e76\0\ua6d7\14\51\0\u1035\14\13\0\336\14\u3fe2\0\u021e\14"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\4\1\5\1\6\3\1"+
    "\1\6\1\7\1\1\1\10\3\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\5\6\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\6\1\3\1\0\1\26\1\27"+
    "\1\30\2\0\1\31\1\6\1\32\1\33\1\34\1\35"+
    "\1\36\3\6\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\5\6\1\46\2\6\2\0\1\47\3\6\1\50"+
    "\1\6\1\51\5\6\1\0\1\6\1\52\1\6\1\53"+
    "\1\6\1\54\1\55\1\56\3\6\1\57\1\60\1\6"+
    "\1\61\1\62\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\63\0\63\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\63\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\63"+
    "\0\63\0\63\0\63\0\u0561\0\63\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\63\0\63\0\63\0\u0660\0\u01fe\0\63\0\u0693"+
    "\0\63\0\63\0\63\0\63\0\63\0\u06c6\0\u06f9\0\u072c"+
    "\0\u0165\0\63\0\63\0\63\0\63\0\63\0\63\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\63\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\63\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0165"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\63\0\u0bf4\0\u0165\0\u0165\0\u0165\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\63\0\u0165\0\u0cc0\0\u0165\0\u0165\0\u0165\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\2\2\11\1\15\1\16\1\17"+
    "\1\20\1\11\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\11\1\33\1\34\1\35"+
    "\1\36\1\11\1\37\1\11\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\11\1\46\1\47\1\11\65\0\1\3"+
    "\64\0\1\5\64\0\1\6\63\0\1\50\1\51\11\0"+
    "\1\52\62\0\1\53\42\0\1\11\6\0\2\11\3\0"+
    "\4\11\3\0\4\11\7\0\11\11\6\0\4\11\12\0"+
    "\1\54\61\0\1\55\5\0\3\55\3\0\4\55\7\0"+
    "\11\55\6\0\4\55\2\0\11\56\1\0\1\57\34\56"+
    "\6\0\5\56\1\0\1\11\6\0\2\11\3\0\4\11"+
    "\3\0\4\11\7\0\5\11\1\60\3\11\6\0\4\11"+
    "\22\0\1\61\62\0\1\62\65\0\1\63\1\64\1\65"+
    "\35\0\1\11\6\0\2\11\3\0\4\11\3\0\4\11"+
    "\7\0\1\66\10\11\6\0\4\11\2\0\1\11\6\0"+
    "\2\11\3\0\4\11\3\0\1\11\1\67\2\11\7\0"+
    "\11\11\6\0\4\11\2\0\1\11\6\0\2\11\3\0"+
    "\1\11\1\70\2\11\3\0\4\11\7\0\3\11\1\71"+
    "\5\11\6\0\4\11\22\0\1\72\10\0\1\73\51\0"+
    "\1\74\11\0\1\75\50\0\1\76\62\0\1\77\42\0"+
    "\1\11\6\0\2\11\3\0\3\11\1\100\3\0\4\11"+
    "\7\0\11\11\6\0\4\11\2\0\1\11\6\0\2\11"+
    "\3\0\4\11\3\0\4\11\7\0\10\11\1\101\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\4\11\3\0"+
    "\4\11\7\0\1\11\1\102\7\11\6\0\4\11\2\0"+
    "\1\11\6\0\2\11\3\0\4\11\3\0\4\11\7\0"+
    "\11\11\6\0\1\103\3\11\2\0\1\11\6\0\2\11"+
    "\3\0\4\11\3\0\4\11\7\0\10\11\1\104\6\0"+
    "\4\11\55\0\1\105\7\0\1\11\6\0\2\11\3\0"+
    "\4\11\3\0\4\11\7\0\1\106\10\11\6\0\4\11"+
    "\2\0\1\11\6\0\2\11\3\0\3\11\1\107\3\0"+
    "\4\11\7\0\11\11\6\0\4\11\1\0\2\50\1\4"+
    "\1\5\57\50\7\110\1\111\53\110\12\0\1\112\51\0"+
    "\1\11\6\0\2\11\3\0\2\11\1\113\1\11\3\0"+
    "\4\11\7\0\11\11\6\0\4\11\2\0\1\11\6\0"+
    "\2\11\3\0\4\11\3\0\4\11\7\0\1\11\1\114"+
    "\7\11\6\0\4\11\2\0\1\11\6\0\2\11\3\0"+
    "\4\11\3\0\4\11\7\0\1\11\1\115\7\11\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\2\11\1\116"+
    "\1\11\3\0\4\11\7\0\11\11\6\0\4\11\2\0"+
    "\1\11\6\0\2\11\3\0\4\11\3\0\3\11\1\117"+
    "\7\0\11\11\6\0\4\11\2\0\1\11\6\0\2\11"+
    "\3\0\3\11\1\120\3\0\4\11\7\0\11\11\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\4\11\3\0"+
    "\3\11\1\121\7\0\11\11\6\0\4\11\2\0\1\11"+
    "\6\0\2\11\3\0\4\11\3\0\2\11\1\122\1\11"+
    "\7\0\11\11\6\0\4\11\2\0\1\11\6\0\2\11"+
    "\3\0\4\11\3\0\3\11\1\123\7\0\11\11\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\4\11\3\0"+
    "\3\11\1\124\7\0\11\11\6\0\4\11\2\0\1\11"+
    "\6\0\2\11\3\0\4\11\3\0\4\11\7\0\5\11"+
    "\1\125\3\11\6\0\4\11\1\0\7\110\1\126\53\110"+
    "\6\0\1\5\1\111\54\0\1\11\6\0\2\11\3\0"+
    "\4\11\3\0\4\11\7\0\6\11\1\127\2\11\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\3\11\1\130"+
    "\3\0\4\11\7\0\11\11\6\0\4\11\2\0\1\11"+
    "\6\0\2\11\3\0\1\11\1\131\2\11\3\0\4\11"+
    "\7\0\11\11\6\0\4\11\2\0\1\11\5\0\1\132"+
    "\2\11\3\0\4\11\3\0\4\11\7\0\11\11\6\0"+
    "\4\11\2\0\1\11\6\0\2\11\3\0\1\11\1\133"+
    "\2\11\3\0\4\11\7\0\11\11\6\0\4\11\2\0"+
    "\1\11\6\0\2\11\3\0\1\11\1\134\2\11\3\0"+
    "\4\11\7\0\11\11\6\0\4\11\2\0\1\11\6\0"+
    "\2\11\3\0\4\11\3\0\4\11\7\0\5\11\1\135"+
    "\3\11\6\0\4\11\2\0\1\11\6\0\2\11\3\0"+
    "\4\11\3\0\1\136\3\11\7\0\11\11\6\0\4\11"+
    "\2\0\1\11\6\0\2\11\3\0\4\11\3\0\4\11"+
    "\7\0\11\11\6\0\1\137\3\11\2\0\1\11\6\0"+
    "\2\11\3\0\4\11\3\0\4\11\7\0\1\11\1\140"+
    "\7\11\6\0\4\11\1\0\6\110\1\5\1\126\53\110"+
    "\1\0\1\11\6\0\2\11\3\0\3\11\1\141\3\0"+
    "\4\11\7\0\11\11\6\0\4\11\2\0\1\11\5\0"+
    "\1\142\2\11\3\0\4\11\3\0\4\11\7\0\11\11"+
    "\6\0\4\11\2\0\1\11\6\0\2\11\3\0\4\11"+
    "\3\0\4\11\7\0\3\11\1\143\5\11\6\0\4\11"+
    "\2\0\1\11\6\0\2\11\3\0\2\11\1\144\1\11"+
    "\3\0\4\11\7\0\11\11\6\0\4\11\2\0\1\11"+
    "\6\0\2\11\3\0\4\11\3\0\4\11\7\0\5\11"+
    "\1\145\3\11\6\0\4\11\2\0\1\11\6\0\2\11"+
    "\3\0\4\11\3\0\4\11\7\0\11\11\6\0\3\11"+
    "\1\146\2\0\1\11\6\0\2\11\3\0\1\11\1\147"+
    "\2\11\3\0\4\11\7\0\11\11\6\0\4\11\2\0"+
    "\1\11\6\0\2\11\3\0\4\11\3\0\4\11\7\0"+
    "\3\11\1\150\5\11\6\0\4\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3315];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\16\1\2\11\4\1\1\11"+
    "\5\1\4\11\1\1\1\11\3\1\1\0\3\11\2\0"+
    "\1\11\1\1\5\11\4\1\6\11\5\1\1\11\2\1"+
    "\2\0\1\11\13\1\1\0\3\1\1\11\7\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private void reportError(int line, String msg) {
        System.out.println("Lexical error at line #" + line + ": " + msg);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2732) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline + 1, "Illegal character \"" + yytext() + "\"");
            }
          case 53: break;
          case 2: 
            { return new Symbol(sym.NUM,  yyline + 1, yycolumn + 1, yytext());
            }
          case 54: break;
          case 3: 
            { /*Do Nothing*/
            }
          case 55: break;
          case 4: 
            { return new Symbol(sym.OPERADORDIV,  yyline + 1, yycolumn + 1, yytext());
            }
          case 56: break;
          case 5: 
            { return new Symbol(sym.OPERADORMULTIPLICACION,  yyline + 1, yycolumn + 1, yytext());
            }
          case 57: break;
          case 6: 
            { return new Symbol(sym.ID,  yyline + 1, yycolumn + 1, yytext());
            }
          case 58: break;
          case 7: 
            { return new Symbol(sym.IGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 59: break;
          case 8: 
            { return new Symbol(sym.MODARITMETICO,  yyline + 1, yycolumn + 1, yytext());
            }
          case 60: break;
          case 9: 
            { return new Symbol(sym.PARENTESISIZQUIERDO,  yyline + 1, yycolumn + 1, yytext());
            }
          case 61: break;
          case 10: 
            { return new Symbol(sym.PARENTESISDERECHO,  yyline + 1, yycolumn + 1, yytext());
            }
          case 62: break;
          case 11: 
            { return new Symbol(sym.OPERADORSUMA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 63: break;
          case 12: 
            { return new Symbol(sym.OPERADORRESTA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 64: break;
          case 13: 
            { return new Symbol(sym.MAYORQUE,  yyline + 1, yycolumn + 1, yytext());
            }
          case 65: break;
          case 14: 
            { return new Symbol(sym.MENORQUE,  yyline + 1, yycolumn + 1, yytext());
            }
          case 66: break;
          case 15: 
            { return new Symbol(sym.COMA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 67: break;
          case 16: 
            { return new Symbol(sym.CORCHETEIZQUIERDO,  yyline + 1, yycolumn + 1, yytext());
            }
          case 68: break;
          case 17: 
            { return new Symbol(sym.CORCHETEDERECHO,  yyline + 1, yycolumn + 1, yytext());
            }
          case 69: break;
          case 18: 
            { return new Symbol(sym.LLAVEIZQUIERDA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 70: break;
          case 19: 
            { return new Symbol(sym.LLAVEDERECHA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 71: break;
          case 20: 
            { return new Symbol(sym.AND,  yyline + 1, yycolumn + 1, yytext());
            }
          case 72: break;
          case 21: 
            { return new Symbol(sym.PUNTOYCOMA,  yyline + 1, yycolumn + 1, yytext());
            }
          case 73: break;
          case 22: 
            { return new Symbol(sym.DIVIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 74: break;
          case 23: 
            { return new Symbol(sym.MULTIIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 75: break;
          case 24: 
            { return new Symbol(sym.OROR,  yyline + 1, yycolumn + 1, yytext());
            }
          case 76: break;
          case 25: 
            { return new Symbol(sym.CONSTSTR,  yyline + 1, yycolumn + 1, yytext());
            }
          case 77: break;
          case 26: 
            { return new Symbol(sym.IGUALQUE,  yyline + 1, yycolumn + 1, yytext());
            }
          case 78: break;
          case 27: 
            { return new Symbol(sym.NOTIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 79: break;
          case 28: 
            { return new Symbol(sym.PERCENTAGEDIGIT,  yyline + 1, yycolumn + 1, yytext());
            }
          case 80: break;
          case 29: 
            { return new Symbol(sym.PERCENTAGECHART,  yyline + 1, yycolumn + 1, yytext());
            }
          case 81: break;
          case 30: 
            { return new Symbol(sym.PERCENTAGESTRING,  yyline + 1, yycolumn + 1, yytext());
            }
          case 82: break;
          case 31: 
            { return new Symbol(sym.IF, yyline + 1, yycolumn + 1, yytext());
            }
          case 83: break;
          case 32: 
            { return new Symbol(sym.MASIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 84: break;
          case 33: 
            { return new Symbol(sym.MASMAS,  yyline + 1, yycolumn + 1, yytext());
            }
          case 85: break;
          case 34: 
            { return new Symbol(sym.MENOSIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 86: break;
          case 35: 
            { return new Symbol(sym.MENOSMENOS,  yyline + 1, yycolumn + 1, yytext());
            }
          case 87: break;
          case 36: 
            { return new Symbol(sym.MAYORIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 88: break;
          case 37: 
            { return new Symbol(sym.MENORIGUAL,  yyline + 1, yycolumn + 1, yytext());
            }
          case 89: break;
          case 38: 
            { return new Symbol(sym.ANDAND,  yyline + 1, yycolumn + 1, yytext());
            }
          case 90: break;
          case 39: 
            { return new Symbol(sym.CONSTCHAR,  yyline + 1, yycolumn + 1, yytext());
            }
          case 91: break;
          case 40: 
            { return new Symbol(sym.INT,  yyline + 1, yycolumn + 1, yytext());
            }
          case 92: break;
          case 41: 
            { return new Symbol(sym.FOR,yyline + 1,yycolumn + 1, yytext());
            }
          case 93: break;
          case 42: 
            { return new Symbol(sym.CHAR,  yyline + 1, yycolumn + 1, yytext());
            }
          case 94: break;
          case 43: 
            { return new Symbol(sym.INTPUNT,  yyline + 1, yycolumn + 1, yytext());
            }
          case 95: break;
          case 44: 
            { return new Symbol(sym.MAIN,  yyline + 1, yycolumn + 1, yytext());
            }
          case 96: break;
          case 45: 
            { return new Symbol(sym.ELSE,yyline + 1, yycolumn + 1, yytext());
            }
          case 97: break;
          case 46: 
            { return new Symbol(sym.VOID,  yyline + 1, yycolumn + 1, yytext());
            }
          case 98: break;
          case 47: 
            { return new Symbol(sym.CHARPUNT,  yyline + 1, yycolumn + 1, yytext());
            }
          case 99: break;
          case 48: 
            { return new Symbol(sym.SCANF,  yyline + 1, yycolumn + 1, yytext());
            }
          case 100: break;
          case 49: 
            { return new Symbol(sym.WHILE, yyline + 1, yycolumn + 1, yytext());
            }
          case 101: break;
          case 50: 
            { return new Symbol(sym.BREAK,  yyline + 1, yycolumn + 1, yytext());
            }
          case 102: break;
          case 51: 
            { return new Symbol(sym.RETURN,  yyline + 1, yycolumn + 1, yytext());
            }
          case 103: break;
          case 52: 
            { return new Symbol(sym.PRINTF,  yyline + 1, yycolumn + 1, yytext());
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

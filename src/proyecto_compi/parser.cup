package proyecto_compi;
import java.io.*;
import java_cup.runtime.*;
 


parser code
{:
	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
       


:}

/* Terminals Tokens */



terminal INT, CHAR;
terminal String INTPUNT, CHARPUNT;

terminal String ID;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal MAIN; 
terminal RETURN; 
terminal VOID; 
terminal CORCHETEIZQUIERDO; 
terminal CORCHETEDERECHO;
terminal LLAVEIZQUIERDA;
terminal LLAVEDERECHA;
terminal String CONSTCHAR; 
terminal String CONSTSTR;
terminal PARENTESISIZQUIERDO; 
terminal PARENTESISDERECHO;
terminal IGUAL;
terminal PUNTO;
terminal NOT;
terminal PRINTF;
terminal SCANF;
terminal PERCENTAGE;
terminal PERCENTAGEDIGIT;
terminal PERCENTAGESTRING;
terminal PERCENTAGECHART;
terminal String NUM;
terminal BREAK;
terminal MASMAS;
terminal OPERADORSUMA;
terminal OPERADORRESTA;
terminal OPERADORMULTIPLICACION;
terminal OPERADORDIV; 
terminal MENOSMENOS;
terminal MASIGUAL;
terminal MENOSIGUAL;
terminal MULTIIGUAL;
terminal DIVIGUAL;
terminal MODASIGNACION;  
terminal MENORQUE;
terminal MAYORQUE;
terminal MAYORIGUAL;
terminal MENORIGUAL;
terminal NOTIGUAL;
terminal IGUALQUE;
terminal MODARITMETICO;
terminal INTERROGACION;
terminal ANDAND;
terminal OROR;
terminal PUNTOYCOMA;
terminal COMA;
terminal DOSPUNTOS;
terminal PARAMETROSCANF;
terminal AND;
terminal IMPORT;

non terminal arg_list;
non terminal args;
non terminal assignment_expression;
non terminal assignment_expressionP;
non terminal assignment_statement;
non terminal boolean_expression;
non terminal condition;
non terminal conditionP;
non terminal constant;
non terminal E1;
non terminal E2;
non terminal E3;
non terminal expr_for;
non terminal expr_increment;
non terminal expr;
non terminal exprP;
non terminal factor;
non terminal flags;
non terminal for_statement;
non terminal function_call;
non terminal function_call_statement;

non terminal function_definition;
non terminal if_statement;
non terminal inc ;
non terminal inc_special;
non terminal increment;
non terminal incrementP;
non terminal arg_listP;
non terminal init_for;
non terminal init_forP;
non terminal jump_statement;
non terminal logical_expression;
non terminal logical_operators;
non terminal Main_Function;
non terminal param_id;
non terminal param_list;
non terminal param_listP;
non terminal param_type_list;
non terminal params;
non terminal printf_statement;
non terminal relational_expression;
non terminal relational_operators;

non terminal scanf_statement;
non terminal statement;
non terminal statement_inside_if;
non terminal statement_inside_while;
non terminal statement_list;
non terminal term;
non terminal termP;
non terminal type;
non terminal variable;
non terminal variable_declaration ;
non terminal variable_initialization;
non terminal variable_list;
non terminal while_statement;



Main_Function ::= INT MAIN PARENTESISIZQUIERDO params:p PARENTESISDERECHO LLAVEIZQUIERDA statement_list:sl RETURN expr PUNTOYCOMA LLAVEDERECHA function_definition:fdl
                ;


variable_declaration ::= type variable_list PUNTOYCOMA
            |type error {: parser.report_error("variable_declarators" ,"ERROR"); :} PUNTOYCOMA
            |type error
            {: parser.report_error("variable_declarators" ,"ERROR"); :}
            statement;

expr ::= term:t exprP:e;				
exprP ::= OPERADORSUMA term:t exprP:e                   
		| OPERADORRESTA term:t exprP:e		
		|
		;


term ::= factor:f termP:t                               
		;

termP ::= OPERADORMULTIPLICACION factor:f termP:p            				
		| OPERADORDIV factor:f termP:p 		
		| 
		;

factor ::=variable:v 					
		| PARENTESISIZQUIERDO expr:e PARENTESISDERECHO		
		| constant:c 									
		| function_call ;

variable_list ::=   variable_list:list COMA variable_initialization:v                
			| variable_initialization:v   ;                              

variable ::= ID:id                                                                   
			|ID:id CORCHETEIZQUIERDO expr:e CORCHETEDERECHO     
			;

variable_initialization ::= variable_initialization:v IGUAL expr:e              
			| variable:v                                             ;

type ::= INT 							
	| CHAR 							
	| CHARPUNT						
	| INTPUNT
        | VOID
	;

jump_statement ::= BREAK PUNTOYCOMA 		
				| RETURN PUNTOYCOMA 		
				| RETURN expr:e PUNTOYCOMA      ;

if_statement ::= IF PARENTESISIZQUIERDO boolean_expression:b PARENTESISDERECHO statement_inside_if:s 
				| IF error  {: parser.report_error("expression" ,"ERROR"); :} PARENTESISDERECHO statement_inside_if ;

statement_list ::= statement_list:list statement:s          
				|;

statement::= if_statement:s 							
		| jump_statement:s                                              
		| assignment_statement:s 					
		| function_call_statement 
		| for_statement
		| variable_declaration:s 					
		| while_statement:s 						
		| printf_statement:s 						
		| scanf_statement:s;

statement_inside_if ::= LLAVEIZQUIERDA statement_list:s LLAVEDERECHA     
                        |LLAVEIZQUIERDA statement_list:s1 LLAVEDERECHA ELSE LLAVEIZQUIERDA statement_list:s2 LLAVEDERECHA;

printf_statement ::= PRINTF PARENTESISIZQUIERDO CONSTSTR:c COMA expr:e PARENTESISDERECHO PUNTOYCOMA     
				| PRINTF PARENTESISIZQUIERDO CONSTSTR:c PARENTESISDERECHO PUNTOYCOMA;

scanf_statement ::=  SCANF PARENTESISIZQUIERDO  flags:f COMA variable:v PARENTESISDERECHO PUNTOYCOMA;

flags ::= PERCENTAGEDIGIT        
	| PERCENTAGESTRING 	 
	| PERCENTAGECHART;

boolean_expression ::= relational_expression:rl logical_expression:le
                    |scanf_statement relational_expression;

relational_expression ::=  expr:e1 relational_operators:r expr:e2 
							| PARENTESISIZQUIERDO relational_expression:rl PARENTESISDERECHO 
							| error {: parser.report_error("relational_expression","ERROR"); :} 
                                MENORQUE expr
                              | error {: parser.report_error("relational_expression","ERROR"); :} 
                                MAYORQUE expr
                              | error  {: parser.report_error("relational_expression","ERROR"); :} 
                                MENORIGUAL expr
                              | error {: parser.report_error("relational_expression" ,"ERROR"); :} 
                                MAYORIGUAL expr ;

relational_operators ::=  MENORIGUAL      
					| MENORQUE 			
					| MAYORQUE 			
					| MAYORIGUAL 			
					| IGUALQUE 			
					| NOTIGUAL;

logical_expression ::= logical_operators:lo boolean_expression:bo 
					|	;

logical_operators ::= ANDAND 		
					| OROR
					;

function_definition ::= type:t ID:id PARENTESISIZQUIERDO params:p PARENTESISDERECHO LLAVEIZQUIERDA statement_list:sl LLAVEDERECHA function_definition:list
					|  
					;

assignment_statement ::= assignment_expression:a PUNTOYCOMA;

assignment_expression ::= variable_initialization:v assignment_expressionP:a                            
						| expr_increment:e assignment_expressionP:a		
						;
assignment_expressionP ::= variable_initialization:v assignment_expressionP:a                           
                            |;


params ::= param_list:list                                              
		| ;		

param_list ::= param_type_list:p param_listP:list 			
			| error 
      {: parser.report_error("formal_parameter_list","ERROR"); :} 
    COMA param_type_list param_listP;

param_listP ::= COMA param_type_list:p param_listP:list	
			|			
			;

param_type_list ::= type:t param_id:id 	;

param_id ::= ID:id 							
		| ID:id CORCHETEIZQUIERDO CORCHETEDERECHO ;

while_statement ::= WHILE PARENTESISIZQUIERDO boolean_expression:b PARENTESISDERECHO statement_inside_while:s
			| WHILE error 
      {: parser.report_error("expression" , "ERROR"); :}
    PARENTESISDERECHO statement;

statement_inside_while ::= LLAVEIZQUIERDA statement_list:sl LLAVEDERECHA;

for_statement ::= FOR PARENTESISIZQUIERDO expr_for PARENTESISDERECHO LLAVEIZQUIERDA statement_list LLAVEDERECHA;

expr_for ::= E1 PUNTOYCOMA E2 PUNTOYCOMA E3;

E1 ::= init_for| ;
E2 ::= condition| ;
E3 ::= increment| ;

constant ::= CONSTCHAR:c 
		| CONSTSTR:s 	
		| NUM:i
		;

init_for ::= INT assignment_expression init_forP
			| assignment_expression
			;

init_forP ::= COMA INT assignment_expression init_forP
			| COMA assignment_expression
			|
			;

condition ::= ID relational_operators expr conditionP;
conditionP ::= COMA ID relational_operators expr conditionP
			|
			;

function_call ::= ID PARENTESISIZQUIERDO args PARENTESISDERECHO;
function_call_statement ::= function_call PUNTOYCOMA;

increment ::= expr_increment:e incrementP:i;

incrementP ::= COMA expr_increment:e incrementP:i 		
			|					
			;

expr_increment ::= variable:v inc:i 	
				| inc_special:i variable:v ;

inc ::= MENOSIGUAL expr:e  	
	| MENOSMENOS 		
	| MASIGUAL expr:e 	 
	| MASMAS 			
	| DIVIGUAL expr:e 		 
	| MULTIIGUAL expr:e 	 ;

inc_special ::= MASMAS 	
			| MENOSMENOS 	;

args::= arg_list 
		| ;

arg_list ::= expr arg_listP 
		;

arg_listP ::= COMA expr arg_listP
			|
			;
